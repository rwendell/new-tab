{"mappings":"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","sources":["packages/@react-aria/gridlist/src/index.ts","packages/@react-aria/gridlist/src/useGridList.ts","packages/@react-aria/gridlist/src/utils.ts","packages/@react-aria/gridlist/src/useGridListItem.ts","packages/@react-aria/gridlist/src/useGridListSelectionCheckbox.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useGridList} from './useGridList';\nexport {useGridListItem} from './useGridListItem';\nexport {useGridListSelectionCheckbox} from './useGridListSelectionCheckbox';\n\nexport type {AriaGridListOptions, AriaGridListProps, GridListAria, GridListProps} from './useGridList';\nexport type {AriaGridListItemOptions, GridListItemAria} from './useGridListItem';\nexport type {AriaGridSelectionCheckboxProps, GridSelectionCheckboxAria} from '@react-aria/grid';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AriaLabelingProps,\n  CollectionBase,\n  DisabledBehavior,\n  DOMAttributes,\n  DOMProps,\n  KeyboardDelegate,\n  MultipleSelection\n} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {listMap} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useGridSelectionAnnouncement, useHighlightSelectionDescription} from '@react-aria/grid';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface GridListProps<T> extends CollectionBase<T>, MultipleSelection {\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\nexport interface AriaGridListProps<T> extends GridListProps<T>, DOMProps, AriaLabelingProps {}\n\nexport interface AriaGridListOptions<T> extends Omit<AriaGridListProps<T>, 'children'> {\n  /** Whether the list uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\nexport interface GridListAria {\n  /** Props for the grid element. */\n  gridProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a list component with interactive children.\n * A grid list displays data in a single column and enables a user to navigate its contents via directional navigation keys.\n * @param props - Props for the list.\n * @param state - State for the list, as returned by `useListState`.\n * @param ref - The ref attached to the list element.\n */\nexport function useGridList<T>(props: AriaGridListOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): GridListAria {\n  let {\n    isVirtualized,\n    keyboardDelegate,\n    onAction\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let {listProps} = useSelectableList({\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    ref,\n    keyboardDelegate: keyboardDelegate,\n    isVirtualized,\n    selectOnFocus: state.selectionManager.selectionBehavior === 'replace'\n  });\n\n  let id = useId();\n  listMap.set(state, {id, onAction});\n\n  let descriptionProps = useHighlightSelectionDescription({\n    selectionManager: state.selectionManager,\n    hasItemActions: !!onAction\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let gridProps: DOMAttributes = mergeProps(\n    domProps,\n    {\n      role: 'grid',\n      id,\n      'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined\n    },\n    state.collection.size === 0 ? {} : listProps,\n    descriptionProps\n  );\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = 1;\n  }\n\n  useGridSelectionAnnouncement({}, state);\n\n  return {\n    gridProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport type {ListState} from '@react-stately/list';\n\ninterface ListMapShared {\n  id: string,\n  onAction: (key: Key) => void\n}\n\n// Used to share:\n// id of the list and onAction between useList, useListItem, and useListSelectionCheckbox\nexport const listMap = new WeakMap<ListState<unknown>, ListMapShared>();\n\nexport function getRowId<T>(state: ListState<T>, key: Key) {\n  let {id} = listMap.get(state);\n  if (!id) {\n    throw new Error('Unknown list');\n  }\n\n  return `${id}-${normalizeKey(key)}`;\n}\n\nexport function normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, Node as RSNode} from '@react-types/shared';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {getRowId, listMap} from './utils';\nimport {isFocusVisible} from '@react-aria/interactions';\nimport type {ListState} from '@react-stately/list';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {KeyboardEvent as ReactKeyboardEvent, RefObject} from 'react';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface AriaGridListItemOptions {\n  /** An object representing the list item. Contains all the relevant information that makes up the list row. */\n  node: RSNode<unknown>,\n  /** Whether the list row is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean\n}\n\nexport interface GridListItemAria extends SelectableItemStates {\n  /** Props for the list row element. */\n  rowProps: DOMAttributes,\n  /** Props for the grid cell element within the list row. */\n  gridCellProps: DOMAttributes,\n  /** Props for the list item description element, if any. */\n  descriptionProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a row in a grid list.\n * @param props - Props for the row.\n * @param state - State of the parent list, as returned by `useListState`.\n * @param ref - The ref attached to the row element.\n */\nexport function useGridListItem<T>(props: AriaGridListItemOptions, state: ListState<T>, ref: RefObject<FocusableElement>): GridListItemAria {\n  // Copied from useGridCell + some modifications to make it not so grid specific\n  let {\n    node,\n    isVirtualized,\n    shouldSelectOnPressUp\n  } = props;\n\n  let {direction} = useLocale();\n  let {onAction} = listMap.get(state);\n  let descriptionId = useSlotId();\n  let focus = () => {\n    // Don't shift focus to the row if the active element is a element within the row already\n    // (e.g. clicking on a row button)\n    if (!ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  };\n\n  let {itemProps, ...itemStates} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction: onAction ? () => onAction(node.key) : undefined,\n    focus\n  });\n\n  let onKeyDown = (e: ReactKeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target as Element)) {\n      return;\n    }\n\n    let walker = getFocusableTreeWalker(ref.current);\n    walker.currentNode = document.activeElement;\n\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // Find the next focusable element within the row.\n        let focusable = direction === 'rtl'\n          ? walker.nextNode() as FocusableElement\n          : walker.previousNode() as FocusableElement;\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n        } else {\n          // If there is no next focusable child, then return focus back to the row\n          e.preventDefault();\n          e.stopPropagation();\n          if (direction === 'rtl') {\n            focusSafely(ref.current);\n          } else {\n            walker.currentNode = ref.current;\n            let lastElement = last(walker);\n            if (lastElement) {\n              focusSafely(lastElement);\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        let focusable = direction === 'rtl'\n          ? walker.previousNode() as FocusableElement\n          : walker.nextNode() as FocusableElement;\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n        } else {\n          e.preventDefault();\n          e.stopPropagation();\n          if (direction === 'ltr') {\n            focusSafely(ref.current);\n          } else {\n            walker.currentNode = ref.current;\n            let lastElement = last(walker);\n            if (lastElement) {\n              focusSafely(lastElement);\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching row children, e.g. menu buttons. We want arrow keys to navigate\n        // to the row above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target as Element)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(\n            new KeyboardEvent(e.nativeEvent.type, e.nativeEvent)\n          );\n        }\n        break;\n    }\n  };\n\n  let onFocus = (e) => {\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the row itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row\n      // in that case since the list should act like a single tab stop.\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocusedKey(node.key);\n      }\n      return;\n    }\n  };\n\n  let rowProps: DOMAttributes = mergeProps(itemProps, {\n    role: 'row',\n    onKeyDownCapture: onKeyDown,\n    onFocus,\n    'aria-label': node.textValue || undefined,\n    'aria-selected': state.selectionManager.canSelectItem(node.key) ? state.selectionManager.isSelected(node.key) : undefined,\n    'aria-disabled': state.selectionManager.isDisabled(node.key) || undefined,\n    'aria-labelledby': descriptionId && node.textValue ? `${getRowId(state, node.key)} ${descriptionId}` : undefined,\n    id: getRowId(state, node.key)\n  });\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = node.index + 1;\n  }\n\n  let gridCellProps = {\n    role: 'gridcell',\n    'aria-colindex': 1\n  };\n\n  return {\n    rowProps,\n    gridCellProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    ...itemStates\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaGridSelectionCheckboxProps, GridSelectionCheckboxAria, useGridSelectionCheckbox} from '@react-aria/grid';\nimport {getRowId} from './utils';\nimport type {ListState} from '@react-stately/list';\n\n/**\n * Provides the behavior and accessibility implementation for a selection checkbox in a grid list.\n * @param props - Props for the selection checkbox.\n * @param state - State of the list, as returned by `useListState`.\n */\nexport function useGridListSelectionCheckbox<T>(props: AriaGridSelectionCheckboxProps, state: ListState<T>): GridSelectionCheckboxAria {\n  let {key} = props;\n  const {checkboxProps} = useGridSelectionCheckbox(props, state as any);\n\n  return {\n    checkboxProps: {\n      ...checkboxProps,\n      'aria-labelledby': `${checkboxProps.id} ${getRowId(state, key)}`\n    }\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}