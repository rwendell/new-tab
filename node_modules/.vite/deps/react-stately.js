import {
  $11d87f3f76e88657$export$93522d1a439f3617,
  $11d87f3f76e88657$export$b21e0b124e224484,
  $11d87f3f76e88657$export$b4a036af3fc0b032,
  $11d87f3f76e88657$export$d33f79e3ffc3dc83,
  $14e0f24ef4ac5c92$export$2061056d06d7cdf7,
  $14e0f24ef4ac5c92$export$42c81a444fbfb5d4,
  $14e0f24ef4ac5c92$export$461939dd4422153,
  $14e0f24ef4ac5c92$export$5412ac11713b72ad,
  $14e0f24ef4ac5c92$export$5c333a116e949cdd,
  $14e0f24ef4ac5c92$export$91b62ebf2ba703ee,
  $14e0f24ef4ac5c92$export$a2258d9c4118825c,
  $14e0f24ef4ac5c92$export$a5a3b454ada2268e,
  $14e0f24ef4ac5c92$export$a75f2bff57811055,
  $14e0f24ef4ac5c92$export$aa8b41735afcabd2,
  $14e0f24ef4ac5c92$export$b2f4953d301981d5,
  $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3,
  $14e0f24ef4ac5c92$export$ea39ec197993aef0,
  $14e0f24ef4ac5c92$export$ef8b6d9133084f4e,
  $14e0f24ef4ac5c92$export$f91e89d3d0406102,
  $3017fa7ffdddec74$export$8042c6c013fd5226,
  $35ea8db9cb2ccb90$export$680ea196effce5f,
  $3b62074eb05584b2$export$80ee6245ec4f29ec,
  $458b0a5536c1a7cf$export$40bfa8c7b0832715,
  $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5,
  $5b160d28a433310d$export$c17fa47878dc55b6,
  $6c7bd7858deea686$export$cd11ab140839f11d,
  $7613b1592d41b092$export$6cd28814d92fa9c9,
  $9446cca9a3875146$export$7d15b64cf5a3a4c4,
  $9446cca9a3875146$export$cb6e0bb50bc19463,
  $9fc4852771d079eb$export$6e2c8f0811a474ce,
  $c1d7fb2ec91bae71$export$6d08773d2e66f8f2,
  $fb18d541ea1ad717$export$ad991b66133851cf
} from "./chunk-IU76L6J5.js";
import {
  __toESM,
  require_react
} from "./chunk-HKI3Z2PE.js";

// node_modules/@react-stately/calendar/dist/module.js
var import_react = __toESM(require_react());
function $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {
  return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;
}
function $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {
  let halfDuration = {};
  for (let key in duration) {
    halfDuration[key] = Math.floor(duration[key] / 2);
    if (halfDuration[key] > 0 && duration[key] % 2 === 0)
      halfDuration[key]--;
  }
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {
  let aligned = date;
  if (duration.years)
    aligned = $14e0f24ef4ac5c92$export$f91e89d3d0406102(date);
  else if (duration.months)
    aligned = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date);
  else if (duration.weeks)
    aligned = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {
  let d = {
    ...duration
  };
  if (duration.days)
    d.days--;
  else if (duration.weeks)
    d.weeks--;
  else if (duration.months)
    d.months--;
  else if (duration.years)
    d.years--;
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {
  if (minValue && date.compare(minValue) >= 0)
    aligned = $14e0f24ef4ac5c92$export$a75f2bff57811055(aligned, $f62d864046160412$export$144a00ba6044eb9($11d87f3f76e88657$export$93522d1a439f3617(minValue), duration, locale));
  if (maxValue && date.compare(maxValue) <= 0)
    aligned = $14e0f24ef4ac5c92$export$5c333a116e949cdd(aligned, $f62d864046160412$export$530edbfc915b2b04($11d87f3f76e88657$export$93522d1a439f3617(maxValue), duration, locale));
  return aligned;
}
function $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {
  if (minValue)
    date = $14e0f24ef4ac5c92$export$a75f2bff57811055(date, $11d87f3f76e88657$export$93522d1a439f3617(minValue));
  if (maxValue)
    date = $14e0f24ef4ac5c92$export$5c333a116e949cdd(date, $11d87f3f76e88657$export$93522d1a439f3617(maxValue));
  return date;
}
function $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {
  if (!isDateUnavailable)
    return date;
  while (date.compare(minValue) >= 0 && isDateUnavailable(date))
    date = date.subtract({
      days: 1
    });
  if (date.compare(minValue) >= 0)
    return date;
}
function $131cf43a05231e1e$export$6d095e787d2b5e1f(props) {
  let defaultFormatter = (0, import_react.useMemo)(
    () => new $fb18d541ea1ad717$export$ad991b66133851cf(props.locale),
    [
      props.locale
    ]
  );
  let resolvedOptions = (0, import_react.useMemo)(
    () => defaultFormatter.resolvedOptions(),
    [
      defaultFormatter
    ]
  );
  let { locale, createCalendar, visibleDuration = {
    months: 1
  }, minValue, maxValue, selectionAlignment, isDateUnavailable } = props;
  let calendar = (0, import_react.useMemo)(
    () => createCalendar(resolvedOptions.calendar),
    [
      createCalendar,
      resolvedOptions.calendar
    ]
  );
  let [value, setControlledValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue, props.onChange);
  let calendarDateValue = (0, import_react.useMemo)(
    () => value ? $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$93522d1a439f3617(value), calendar) : null,
    [
      value,
      calendar
    ]
  );
  let timeZone = (0, import_react.useMemo)(
    () => value && "timeZone" in value ? value.timeZone : resolvedOptions.timeZone,
    [
      value,
      resolvedOptions.timeZone
    ]
  );
  let focusedCalendarDate = (0, import_react.useMemo)(
    () => props.focusedValue ? $f62d864046160412$export$4f5203c0d889109e($11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$93522d1a439f3617(props.focusedValue), calendar), minValue, maxValue) : void 0,
    [
      props.focusedValue,
      calendar,
      minValue,
      maxValue
    ]
  );
  let defaultFocusedCalendarDate = (0, import_react.useMemo)(
    () => $f62d864046160412$export$4f5203c0d889109e(props.defaultFocusedValue ? $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$93522d1a439f3617(props.defaultFocusedValue), calendar) : calendarDateValue || $11d87f3f76e88657$export$b4a036af3fc0b032($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone), calendar), minValue, maxValue),
    [
      props.defaultFocusedValue,
      calendarDateValue,
      timeZone,
      calendar,
      minValue,
      maxValue
    ]
  );
  let [focusedDate, setFocusedDate] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);
  let [startDate, setStartDate] = (0, import_react.useState)(() => {
    switch (selectionAlignment) {
      case "start":
        return $f62d864046160412$export$144a00ba6044eb9(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "end":
        return $f62d864046160412$export$530edbfc915b2b04(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "center":
      default:
        return $f62d864046160412$export$f4a51ff076cc9a09(focusedDate, visibleDuration, locale, minValue, maxValue);
    }
  });
  let [isFocused, setFocused] = (0, import_react.useState)(props.autoFocus || false);
  let endDate = (0, import_react.useMemo)(() => {
    let duration = {
      ...visibleDuration
    };
    if (duration.days)
      duration.days--;
    else
      duration.days = -1;
    return startDate.add(duration);
  }, [
    startDate,
    visibleDuration
  ]);
  let lastCalendarIdentifier = (0, import_react.useRef)(calendar.identifier);
  if (calendar.identifier !== lastCalendarIdentifier.current) {
    let newFocusedDate = $11d87f3f76e88657$export$b4a036af3fc0b032(focusedDate, calendar);
    setStartDate($f62d864046160412$export$f4a51ff076cc9a09(newFocusedDate, visibleDuration, locale, minValue, maxValue));
    setFocusedDate(newFocusedDate);
    lastCalendarIdentifier.current = calendar.identifier;
  }
  if ($f62d864046160412$export$eac50920cf2fd59a(focusedDate, minValue, maxValue))
    setFocusedDate($f62d864046160412$export$4f5203c0d889109e(focusedDate, minValue, maxValue));
  else if (focusedDate.compare(startDate) < 0)
    setStartDate($f62d864046160412$export$530edbfc915b2b04(focusedDate, visibleDuration, locale, minValue, maxValue));
  else if (focusedDate.compare(endDate) > 0)
    setStartDate($f62d864046160412$export$144a00ba6044eb9(focusedDate, visibleDuration, locale, minValue, maxValue));
  function focusCell(date) {
    date = $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue);
    setFocusedDate(date);
  }
  function setValue(newValue) {
    if (!props.isDisabled && !props.isReadOnly) {
      newValue = $f62d864046160412$export$4f5203c0d889109e(newValue, minValue, maxValue);
      newValue = $f62d864046160412$export$a1d3911297b952d7(newValue, startDate, isDateUnavailable);
      if (!newValue)
        return;
      newValue = $11d87f3f76e88657$export$b4a036af3fc0b032(newValue, (value === null || value === void 0 ? void 0 : value.calendar) || new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      if (value && "hour" in value)
        setControlledValue(value.set(newValue));
      else
        setControlledValue(newValue);
    }
  }
  let isUnavailable = (0, import_react.useMemo)(() => {
    if (!calendarDateValue)
      return false;
    if (isDateUnavailable && isDateUnavailable(calendarDateValue))
      return true;
    return $f62d864046160412$export$eac50920cf2fd59a(calendarDateValue, minValue, maxValue);
  }, [
    calendarDateValue,
    isDateUnavailable,
    minValue,
    maxValue
  ]);
  let validationState = props.validationState || (isUnavailable ? "invalid" : null);
  return {
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    value: calendarDateValue,
    setValue,
    visibleRange: {
      start: startDate,
      end: endDate
    },
    minValue,
    maxValue,
    focusedDate,
    timeZone,
    validationState,
    setFocusedDate(date) {
      focusCell(date);
      setFocused(true);
    },
    focusNextDay() {
      focusCell(focusedDate.add({
        days: 1
      }));
    },
    focusPreviousDay() {
      focusCell(focusedDate.subtract({
        days: 1
      }));
    },
    focusNextRow() {
      if (visibleDuration.days)
        this.focusNextPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.add({
          weeks: 1
        }));
    },
    focusPreviousRow() {
      if (visibleDuration.days)
        this.focusPreviousPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.subtract({
          weeks: 1
        }));
    },
    focusNextPage() {
      let start = startDate.add(visibleDuration);
      setFocusedDate($f62d864046160412$export$4f5203c0d889109e(focusedDate.add(visibleDuration), minValue, maxValue));
      setStartDate($f62d864046160412$export$144a00ba6044eb9($f62d864046160412$export$5bb865b12696a77d(focusedDate, start, visibleDuration, locale, minValue, maxValue), visibleDuration, locale));
    },
    focusPreviousPage() {
      let start = startDate.subtract(visibleDuration);
      setFocusedDate($f62d864046160412$export$4f5203c0d889109e(focusedDate.subtract(visibleDuration), minValue, maxValue));
      setStartDate($f62d864046160412$export$144a00ba6044eb9($f62d864046160412$export$5bb865b12696a77d(focusedDate, start, visibleDuration, locale, minValue, maxValue), visibleDuration, locale));
    },
    focusSectionStart() {
      if (visibleDuration.days)
        focusCell(startDate);
      else if (visibleDuration.weeks)
        focusCell($14e0f24ef4ac5c92$export$42c81a444fbfb5d4(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell($14e0f24ef4ac5c92$export$a5a3b454ada2268e(focusedDate));
    },
    focusSectionEnd() {
      if (visibleDuration.days)
        focusCell(endDate);
      else if (visibleDuration.weeks)
        focusCell($14e0f24ef4ac5c92$export$ef8b6d9133084f4e(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell($14e0f24ef4ac5c92$export$a2258d9c4118825c(focusedDate));
    },
    focusNextSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.add($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days)
        this.focusNextPage();
      else if (visibleDuration.weeks)
        focusCell(focusedDate.add({
          months: 1
        }));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.add({
          years: 1
        }));
    },
    focusPreviousSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.subtract($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days)
        this.focusPreviousPage();
      else if (visibleDuration.weeks)
        focusCell(focusedDate.subtract({
          months: 1
        }));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.subtract({
          years: 1
        }));
    },
    selectFocusedDate() {
      setValue(focusedDate);
    },
    selectDate(date) {
      setValue(date);
    },
    isFocused,
    setFocused,
    isInvalid(date) {
      return $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue);
    },
    isSelected(date) {
      return calendarDateValue != null && $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);
    },
    isCellFocused(date) {
      return isFocused && focusedDate && $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, focusedDate);
    },
    isCellDisabled(date) {
      return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date, minValue, maxValue);
    },
    isCellUnavailable(date) {
      return props.isDateUnavailable && props.isDateUnavailable(date);
    },
    isPreviousVisibleRangeInvalid() {
      let prev = startDate.subtract({
        days: 1
      });
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0(prev, startDate) || this.isInvalid(prev, minValue, maxValue);
    },
    isNextVisibleRangeInvalid() {
      let next = endDate.add({
        days: 1
      });
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0(next, endDate) || this.isInvalid(next, minValue, maxValue);
    },
    getDatesInWeek(weekIndex, from = startDate) {
      let date = from.add({
        weeks: weekIndex
      });
      let dates = [];
      date = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale);
      let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
      for (let i = 0; i < dayOfWeek; i++)
        dates.push(null);
      while (dates.length < 7) {
        dates.push(date);
        let nextDate = date.add({
          days: 1
        });
        if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(date, nextDate))
          break;
        date = nextDate;
      }
      while (dates.length < 7)
        dates.push(null);
      return dates;
    }
  };
}
function $131cf43a05231e1e$var$unitDuration(duration) {
  let unit = {
    ...duration
  };
  for (let key in duration)
    unit[key] = 1;
  return unit;
}
function $9a36b6ba2fb1a7c5$export$9a987164d97ecc90(props) {
  let { value: valueProp, defaultValue, onChange, createCalendar, locale, visibleDuration = {
    months: 1
  }, minValue, maxValue, ...calendarProps } = props;
  let [value, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(valueProp, defaultValue || null, onChange);
  let [anchorDate, setAnchorDateState] = (0, import_react.useState)(null);
  let alignment = "center";
  if (value && value.start && value.end) {
    let start = $f62d864046160412$export$f4a51ff076cc9a09($11d87f3f76e88657$export$93522d1a439f3617(value.start), visibleDuration, locale, minValue, maxValue);
    let end = start.add(visibleDuration).subtract({
      days: 1
    });
    if (value.end.compare(end) > 0)
      alignment = "start";
  }
  let availableRangeRef = (0, import_react.useRef)(null);
  let [availableRange, setAvailableRange] = (0, import_react.useState)(null);
  let min = (0, import_react.useMemo)(() => {
    return $14e0f24ef4ac5c92$export$a75f2bff57811055(minValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.start);
  }, [
    minValue,
    availableRange
  ]);
  let max = (0, import_react.useMemo)(() => {
    return $14e0f24ef4ac5c92$export$5c333a116e949cdd(maxValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.end);
  }, [
    maxValue,
    availableRange
  ]);
  let calendar = $131cf43a05231e1e$export$6d095e787d2b5e1f({
    ...calendarProps,
    value: value && value.start,
    createCalendar,
    locale,
    visibleDuration,
    minValue: min,
    maxValue: max,
    selectionAlignment: alignment
  });
  let updateAvailableRange = (date) => {
    if (date && props.isDateUnavailable && !props.allowsNonContiguousRanges) {
      availableRangeRef.current = {
        start: $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, -1),
        end: $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, 1)
      };
      setAvailableRange(availableRangeRef.current);
    } else {
      availableRangeRef.current = null;
      setAvailableRange(null);
    }
  };
  let lastVisibleRange = (0, import_react.useRef)(calendar.visibleRange);
  if (!$14e0f24ef4ac5c92$export$91b62ebf2ba703ee(calendar.visibleRange.start, lastVisibleRange.current.start) || !$14e0f24ef4ac5c92$export$91b62ebf2ba703ee(calendar.visibleRange.end, lastVisibleRange.current.end)) {
    updateAvailableRange(anchorDate);
    lastVisibleRange.current = calendar.visibleRange;
  }
  let setAnchorDate = (date) => {
    if (date) {
      setAnchorDateState(date);
      updateAvailableRange(date);
    } else {
      setAnchorDateState(null);
      updateAvailableRange(null);
    }
  };
  let highlightedRange = anchorDate ? $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, calendar.focusedDate) : value && $9a36b6ba2fb1a7c5$var$makeRange(value.start, value.end);
  let selectDate = (date) => {
    if (props.isReadOnly)
      return;
    date = $f62d864046160412$export$4f5203c0d889109e(date, min, max);
    date = $f62d864046160412$export$a1d3911297b952d7(date, calendar.visibleRange.start, props.isDateUnavailable);
    if (!date)
      return;
    if (!anchorDate)
      setAnchorDate(date);
    else {
      let range = $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, date);
      setValue({
        start: $9a36b6ba2fb1a7c5$var$convertValue(range.start, value === null || value === void 0 ? void 0 : value.start),
        end: $9a36b6ba2fb1a7c5$var$convertValue(range.end, value === null || value === void 0 ? void 0 : value.end)
      });
      setAnchorDate(null);
    }
  };
  let [isDragging, setDragging] = (0, import_react.useState)(false);
  let { isDateUnavailable } = props;
  let isInvalidSelection = (0, import_react.useMemo)(() => {
    if (!value || anchorDate)
      return false;
    if (isDateUnavailable && (isDateUnavailable(value.start) || isDateUnavailable(value.end)))
      return true;
    return $f62d864046160412$export$eac50920cf2fd59a(value.start, minValue, maxValue) || $f62d864046160412$export$eac50920cf2fd59a(value.end, minValue, maxValue);
  }, [
    isDateUnavailable,
    value,
    anchorDate,
    minValue,
    maxValue
  ]);
  let validationState = props.validationState || (isInvalidSelection ? "invalid" : null);
  return {
    ...calendar,
    value,
    setValue,
    anchorDate,
    setAnchorDate,
    highlightedRange,
    validationState,
    selectFocusedDate() {
      selectDate(calendar.focusedDate);
    },
    selectDate,
    highlightDate(date) {
      if (anchorDate)
        calendar.setFocusedDate(date);
    },
    isSelected(date) {
      return highlightedRange && date.compare(highlightedRange.start) >= 0 && date.compare(highlightedRange.end) <= 0 && !calendar.isCellDisabled(date) && !calendar.isCellUnavailable(date);
    },
    isInvalid(date) {
      var ref, ref1;
      return calendar.isInvalid(date) || $f62d864046160412$export$eac50920cf2fd59a(date, (ref = availableRangeRef.current) === null || ref === void 0 ? void 0 : ref.start, (ref1 = availableRangeRef.current) === null || ref1 === void 0 ? void 0 : ref1.end);
    },
    isDragging,
    setDragging
  };
}
function $9a36b6ba2fb1a7c5$var$makeRange(start, end) {
  if (!start || !end)
    return null;
  if (end.compare(start) < 0)
    [start, end] = [
      end,
      start
    ];
  return {
    start: $11d87f3f76e88657$export$93522d1a439f3617(start),
    end: $11d87f3f76e88657$export$93522d1a439f3617(end)
  };
}
function $9a36b6ba2fb1a7c5$var$convertValue(newValue, oldValue) {
  newValue = $11d87f3f76e88657$export$b4a036af3fc0b032(newValue, (oldValue === null || oldValue === void 0 ? void 0 : oldValue.calendar) || new $3b62074eb05584b2$export$80ee6245ec4f29ec());
  if (oldValue && "hour" in oldValue)
    return oldValue.set(newValue);
  return newValue;
}
function $9a36b6ba2fb1a7c5$var$nextUnavailableDate(anchorDate, state, dir) {
  let nextDate = anchorDate.add({
    days: dir
  });
  while ((dir < 0 ? nextDate.compare(state.visibleRange.start) >= 0 : nextDate.compare(state.visibleRange.end) <= 0) && !state.isCellUnavailable(nextDate))
    nextDate = nextDate.add({
      days: dir
    });
  if (state.isCellUnavailable(nextDate))
    return nextDate.add({
      days: -dir
    });
  return null;
}

// node_modules/@react-stately/checkbox/dist/module.js
function $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {
  let [selectedValues, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue || [], props.onChange);
  const state = {
    value: selectedValues,
    setValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      setValue(value);
    },
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    isSelected(value) {
      return selectedValues.includes(value);
    },
    addValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (!selectedValues.includes(value))
        setValue(selectedValues.concat(value));
    },
    removeValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (selectedValues.includes(value))
        setValue(selectedValues.filter(
          (existingValue) => existingValue !== value
        ));
    },
    toggleValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (selectedValues.includes(value))
        setValue(selectedValues.filter(
          (existingValue) => existingValue !== value
        ));
      else
        setValue(selectedValues.concat(value));
    },
    validationState: props.validationState
  };
  return state;
}

// node_modules/@react-stately/list/dist/module.js
var import_react3 = __toESM(require_react());

// node_modules/@react-stately/selection/dist/module.js
var import_react2 = __toESM(require_react());
var $e40ea825a81a3709$export$52baac22726c72bf = class extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);
    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }
};
function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
  if (setA.size !== setB.size)
    return false;
  for (let item of setA) {
    if (!setB.has(item))
      return false;
  }
  return true;
}
function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
  let { selectionMode = "none", disallowEmptySelection, allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = "toggle", disabledBehavior = "all" } = props;
  let isFocusedRef = (0, import_react2.useRef)(false);
  let [, setFocused] = (0, import_react2.useState)(false);
  let focusedKeyRef = (0, import_react2.useRef)(null);
  let childFocusStrategyRef = (0, import_react2.useRef)(null);
  let [, setFocusedKey] = (0, import_react2.useState)(null);
  let selectedKeysProp = (0, import_react2.useMemo)(
    () => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys),
    [
      props.selectedKeys
    ]
  );
  let defaultSelectedKeys = (0, import_react2.useMemo)(
    () => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf()),
    [
      props.defaultSelectedKeys
    ]
  );
  let [selectedKeys, setSelectedKeys] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
  let disabledKeysProp = (0, import_react2.useMemo)(
    () => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(),
    [
      props.disabledKeys
    ]
  );
  let [selectionBehavior, setSelectionBehavior] = (0, import_react2.useState)(selectionBehaviorProp);
  if (selectionBehaviorProp === "replace" && selectionBehavior === "toggle" && typeof selectedKeys === "object" && selectedKeys.size === 0)
    setSelectionBehavior("replace");
  let lastSelectionBehavior = (0, import_react2.useRef)(selectionBehaviorProp);
  (0, import_react2.useEffect)(() => {
    if (selectionBehaviorProp !== lastSelectionBehavior.current) {
      setSelectionBehavior(selectionBehaviorProp);
      lastSelectionBehavior.current = selectionBehaviorProp;
    }
  }, [
    selectionBehaviorProp
  ]);
  return {
    selectionMode,
    disallowEmptySelection,
    selectionBehavior,
    setSelectionBehavior,
    get isFocused() {
      return isFocusedRef.current;
    },
    setFocused(f) {
      isFocusedRef.current = f;
      setFocused(f);
    },
    get focusedKey() {
      return focusedKeyRef.current;
    },
    get childFocusStrategy() {
      return childFocusStrategyRef.current;
    },
    setFocusedKey(k, childFocusStrategy = "first") {
      focusedKeyRef.current = k;
      childFocusStrategyRef.current = childFocusStrategy;
      setFocusedKey(k);
    },
    selectedKeys,
    setSelectedKeys(keys) {
      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys))
        setSelectedKeys(keys);
    },
    disabledKeys: disabledKeysProp,
    disabledBehavior
  };
}
function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
  if (!selection)
    return defaultValue;
  return selection === "all" ? "all" : new $e40ea825a81a3709$export$52baac22726c72bf(selection);
}
var $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = class {
  get selectionMode() {
    return this.state.selectionMode;
  }
  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  get isFocused() {
    return this.state.isFocused;
  }
  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  get focusedKey() {
    return this.state.focusedKey;
  }
  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  setFocusedKey(key, childFocusStrategy) {
    if (key == null || this.collection.getItem(key))
      this.state.setFocusedKey(key, childFocusStrategy);
  }
  get selectedKeys() {
    return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  get rawSelection() {
    return this.state.selectedKeys;
  }
  isSelected(key) {
    if (this.state.selectionMode === "none")
      return false;
    key = this.getKey(key);
    return this.state.selectedKeys === "all" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
  }
  get isEmpty() {
    return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
  }
  get isSelectAll() {
    if (this.isEmpty)
      return false;
    if (this.state.selectedKeys === "all")
      return true;
    if (this._isSelectAll != null)
      return this._isSelectAll;
    let allKeys = this.getSelectAllKeys();
    let selectedKeys = this.state.selectedKeys;
    this._isSelectAll = allKeys.every(
      (k) => selectedKeys.has(k)
    );
    return this._isSelectAll;
  }
  get firstSelectedKey() {
    let first = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index)
        first = item;
    }
    return first === null || first === void 0 ? void 0 : first.key;
  }
  get lastSelectedKey() {
    let last = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index)
        last = item;
    }
    return last === null || last === void 0 ? void 0 : last.key;
  }
  get disabledKeys() {
    return this.state.disabledKeys;
  }
  get disabledBehavior() {
    return this.state.disabledBehavior;
  }
  extendSelection(toKey) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      this.replaceSelection(toKey);
      return;
    }
    toKey = this.getKey(toKey);
    let selection;
    if (this.state.selectedKeys === "all")
      selection = new $e40ea825a81a3709$export$52baac22726c72bf([
        toKey
      ], toKey, toKey);
    else {
      let selectedKeys = this.state.selectedKeys;
      let anchorKey = selectedKeys.anchorKey || toKey;
      selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);
      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))
        selection.delete(key);
      for (let key1 of this.getKeyRange(toKey, anchorKey))
        if (this.canSelectItem(key1))
          selection.add(key1);
    }
    this.state.setSelectedKeys(selection);
  }
  getKeyRange(from, to) {
    let fromItem = this.collection.getItem(from);
    let toItem = this.collection.getItem(to);
    if (fromItem && toItem) {
      if (fromItem.index <= toItem.index)
        return this.getKeyRangeInternal(from, to);
      return this.getKeyRangeInternal(to, from);
    }
    return [];
  }
  getKeyRangeInternal(from, to) {
    let keys = [];
    let key = from;
    while (key) {
      let item = this.collection.getItem(key);
      if (item && item.type === "item" || item.type === "cell" && this.allowsCellSelection)
        keys.push(key);
      if (key === to)
        return keys;
      key = this.collection.getKeyAfter(key);
    }
    return [];
  }
  getKey(key) {
    let item = this.collection.getItem(key);
    if (!item)
      return key;
    if (item.type === "cell" && this.allowsCellSelection)
      return key;
    while (item.type !== "item" && item.parentKey != null)
      item = this.collection.getItem(item.parentKey);
    if (!item || item.type !== "item")
      return null;
    return item.key;
  }
  toggleSelection(key) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single" && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }
    key = this.getKey(key);
    if (key == null)
      return;
    let keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
    if (keys.has(key))
      keys.delete(key);
    else if (this.canSelectItem(key)) {
      keys.add(key);
      keys.anchorKey = key;
      keys.currentKey = key;
    }
    if (this.disallowEmptySelection && keys.size === 0)
      return;
    this.state.setSelectedKeys(keys);
  }
  replaceSelection(key) {
    if (this.selectionMode === "none")
      return;
    key = this.getKey(key);
    if (key == null)
      return;
    let selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([
      key
    ], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();
    this.state.setSelectedKeys(selection);
  }
  setSelectedKeys(keys) {
    if (this.selectionMode === "none")
      return;
    let selection = new $e40ea825a81a3709$export$52baac22726c72bf();
    for (let key of keys) {
      key = this.getKey(key);
      if (key != null) {
        selection.add(key);
        if (this.selectionMode === "single")
          break;
      }
    }
    this.state.setSelectedKeys(selection);
  }
  getSelectAllKeys() {
    let keys = [];
    let addKeys = (key) => {
      while (key) {
        if (this.canSelectItem(key)) {
          let item = this.collection.getItem(key);
          if (item.type === "item")
            keys.push(key);
          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== "item"))
            addKeys([
              ...item.childNodes
            ][0].key);
        }
        key = this.collection.getKeyAfter(key);
      }
    };
    addKeys(this.collection.getFirstKey());
    return keys;
  }
  selectAll() {
    if (this.selectionMode === "multiple")
      this.state.setSelectedKeys("all");
  }
  clearSelection() {
    if (!this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0))
      this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());
  }
  toggleSelectAll() {
    if (this.isSelectAll)
      this.clearSelection();
    else
      this.selectAll();
  }
  select(key, e) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      if (this.isSelected(key) && !this.disallowEmptySelection)
        this.toggleSelection(key);
      else
        this.replaceSelection(key);
    } else if (this.selectionBehavior === "toggle" || e && (e.pointerType === "touch" || e.pointerType === "virtual"))
      this.toggleSelection(key);
    else
      this.replaceSelection(key);
  }
  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys)
      return true;
    let selectedKeys = this.selectedKeys;
    if (selection.size !== selectedKeys.size)
      return false;
    for (let key of selection) {
      if (!selectedKeys.has(key))
        return false;
    }
    for (let key2 of selectedKeys) {
      if (!selection.has(key2))
        return false;
    }
    return true;
  }
  canSelectItem(key) {
    if (this.state.selectionMode === "none" || this.state.disabledKeys.has(key))
      return false;
    let item = this.collection.getItem(key);
    if (!item || item.type === "cell" && !this.allowsCellSelection)
      return false;
    return true;
  }
  isDisabled(key) {
    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === "all";
  }
  constructor(collection, state, options) {
    this.collection = collection;
    this.state = state;
    var ref;
    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;
    this._isSelectAll = null;
  }
};

// node_modules/@react-stately/list/dist/module.js
var tmp = Symbol.iterator;
var $a02d57049d202695$export$d085fb9e920b5ca7 = class {
  *[tmp]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  constructor(nodes) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.iterable = nodes;
    let visit = (node) => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && node.type === "section")
        for (let child of node.childNodes)
          visit(child);
    };
    for (let node2 of nodes)
      visit(node2);
    let last;
    let index = 0;
    for (let [key, node1] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node1.prevKey = last.key;
      } else {
        this.firstKey = key;
        node1.prevKey = void 0;
      }
      if (node1.type === "item")
        node1.index = index++;
      last = node1;
      last.nextKey = void 0;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
};
function $e72dd72e1c76a225$export$2f645645f7bca764(props) {
  let { filter } = props;
  let selectionState = $7af3f5b51489e0b5$export$253fe78d46329472(props);
  let disabledKeys = (0, import_react3.useMemo)(
    () => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(),
    [
      props.disabledKeys
    ]
  );
  let factory = (nodes) => filter ? new $a02d57049d202695$export$d085fb9e920b5ca7(filter(nodes)) : new $a02d57049d202695$export$d085fb9e920b5ca7(nodes);
  let context = (0, import_react3.useMemo)(
    () => ({
      suppressTextValueWarning: props.suppressTextValueWarning
    }),
    [
      props.suppressTextValueWarning
    ]
  );
  let collection = $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, [
    filter
  ]);
  (0, import_react3.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey))
      selectionState.setFocusedKey(null);
  }, [
    collection,
    selectionState.focusedKey
  ]);
  return {
    collection,
    disabledKeys,
    selectionManager: new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, selectionState)
  };
}
function $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {
  var _defaultSelectedKey;
  let [selectedKey, setSelectedKey] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.selectedKey, (_defaultSelectedKey = props.defaultSelectedKey) !== null && _defaultSelectedKey !== void 0 ? _defaultSelectedKey : null, props.onSelectionChange);
  let selectedKeys = (0, import_react3.useMemo)(
    () => selectedKey != null ? [
      selectedKey
    ] : [],
    [
      selectedKey
    ]
  );
  let { collection, disabledKeys, selectionManager } = $e72dd72e1c76a225$export$2f645645f7bca764({
    ...props,
    selectionMode: "single",
    disallowEmptySelection: true,
    allowDuplicateSelectionEvents: true,
    selectedKeys,
    onSelectionChange: (keys) => {
      let key = keys.values().next().value;
      if (key === selectedKey && props.onSelectionChange)
        props.onSelectionChange(key);
      setSelectedKey(key);
    }
  });
  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
  return {
    collection,
    disabledKeys,
    selectionManager,
    selectedKey,
    setSelectedKey,
    selectedItem
  };
}

// node_modules/@react-stately/combobox/dist/module.js
var import_react5 = __toESM(require_react());

// node_modules/@react-stately/overlays/dist/module.js
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  return {
    isOpen,
    setOpen,
    open() {
      setOpen(true);
    },
    close() {
      setOpen(false);
    },
    toggle() {
      setOpen(!isOpen);
    }
  };
}

// node_modules/@react-stately/menu/dist/module.js
var import_react4 = __toESM(require_react());
function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [focusStrategy1, setFocusStrategy] = (0, import_react4.useState)(null);
  return {
    focusStrategy: focusStrategy1,
    ...overlayTriggerState,
    open(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.open();
    },
    toggle(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.toggle();
    }
  };
}

// node_modules/@react-stately/combobox/dist/module.js
function $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props) {
  var ref4;
  let { defaultFilter, menuTrigger = "input", allowsEmptyCollection = false, allowsCustomValue, shouldCloseOnBlur = true } = props;
  let [showAllItems, setShowAllItems] = (0, import_react5.useState)(false);
  let [isFocused1, setFocusedState] = (0, import_react5.useState)(false);
  var _defaultInputValue;
  let [inputValue, setInputValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.inputValue, (_defaultInputValue = props.defaultInputValue) !== null && _defaultInputValue !== void 0 ? _defaultInputValue : "", props.onInputChange);
  let onSelectionChange = (key) => {
    if (props.onSelectionChange)
      props.onSelectionChange(key);
    if (key === selectedKey) {
      resetInputValue();
      triggerState.close();
    }
  };
  var _items;
  let { collection, selectionManager, selectedKey, setSelectedKey, selectedItem, disabledKeys } = $a0d645289fe9b86b$export$e7f05e985daf4b5f({
    ...props,
    onSelectionChange,
    items: (_items = props.items) !== null && _items !== void 0 ? _items : props.defaultItems
  });
  let originalCollection = collection;
  let filteredCollection = (0, import_react5.useMemo)(
    () => props.items != null || !defaultFilter ? collection : $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, defaultFilter),
    [
      collection,
      inputValue,
      defaultFilter,
      props.items
    ]
  );
  let menuOpenTrigger = (0, import_react5.useRef)("focus");
  let onOpenChange = (open) => {
    if (props.onOpenChange)
      props.onOpenChange(open, open ? menuOpenTrigger.current : void 0);
  };
  let triggerState = $a28c903ee9ad8dc5$export$79fefeb1c2091ac3({
    ...props,
    onOpenChange,
    isOpen: void 0,
    defaultOpen: void 0
  });
  let open1 = (focusStrategy, trigger) => {
    let displayAllItems = trigger === "manual" || trigger === "focus" && menuTrigger === "focus";
    if (allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) {
      if (displayAllItems && !triggerState.isOpen && props.items === void 0)
        setShowAllItems(true);
      menuOpenTrigger.current = trigger;
      triggerState.open(focusStrategy);
    }
  };
  let toggle = (focusStrategy, trigger) => {
    let displayAllItems = trigger === "manual" || trigger === "focus" && menuTrigger === "focus";
    if (!(allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) && !triggerState.isOpen)
      return;
    if (displayAllItems && !triggerState.isOpen && props.items === void 0)
      setShowAllItems(true);
    if (!triggerState.isOpen)
      menuOpenTrigger.current = trigger;
    triggerState.toggle(focusStrategy);
  };
  let lastValue = (0, import_react5.useRef)(inputValue);
  let resetInputValue = () => {
    var ref;
    var ref3;
    let itemText = (ref3 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref3 !== void 0 ? ref3 : "";
    lastValue.current = itemText;
    setInputValue(itemText);
  };
  let isInitialRender = (0, import_react5.useRef)(true);
  var _selectedKey, ref1;
  let lastSelectedKey = (0, import_react5.useRef)((ref1 = (_selectedKey = props.selectedKey) !== null && _selectedKey !== void 0 ? _selectedKey : props.defaultSelectedKey) !== null && ref1 !== void 0 ? ref1 : null);
  var ref2;
  let lastSelectedKeyText = (0, import_react5.useRef)((ref2 = (ref4 = collection.getItem(selectedKey)) === null || ref4 === void 0 ? void 0 : ref4.textValue) !== null && ref2 !== void 0 ? ref2 : "");
  (0, import_react5.useEffect)(() => {
    var ref;
    if (isFocused1 && (filteredCollection.size > 0 || allowsEmptyCollection) && !triggerState.isOpen && inputValue !== lastValue.current && menuTrigger !== "manual")
      open1(null, "input");
    if (!showAllItems && !allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0)
      triggerState.close();
    if (selectedKey != null && selectedKey !== lastSelectedKey.current)
      triggerState.close();
    if (inputValue !== lastValue.current) {
      selectionManager.setFocusedKey(null);
      setShowAllItems(false);
      if (inputValue === "" && (props.inputValue === void 0 || props.selectedKey === void 0))
        setSelectedKey(null);
    }
    if (isInitialRender.current && props.inputValue === void 0 && props.defaultInputValue === void 0)
      resetInputValue();
    if (selectedKey !== lastSelectedKey.current && (props.inputValue === void 0 || props.selectedKey === void 0))
      resetInputValue();
    else
      lastValue.current = inputValue;
    var ref5;
    let selectedItemText = (ref5 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref5 !== void 0 ? ref5 : "";
    if (!isFocused1 && selectedKey != null && props.inputValue === void 0 && selectedKey === lastSelectedKey.current) {
      if (lastSelectedKeyText.current !== selectedItemText) {
        lastValue.current = selectedItemText;
        setInputValue(selectedItemText);
      }
    }
    isInitialRender.current = false;
    lastSelectedKey.current = selectedKey;
    lastSelectedKeyText.current = selectedItemText;
  });
  (0, import_react5.useEffect)(() => {
    if (!triggerState.isOpen)
      selectionManager.setFocusedKey(null);
  }, [
    triggerState.isOpen,
    selectionManager
  ]);
  let revert = () => {
    if (allowsCustomValue && selectedKey == null)
      commitCustomValue();
    else
      commitSelection();
  };
  let commitCustomValue = () => {
    lastSelectedKey.current = null;
    setSelectedKey(null);
    triggerState.close();
  };
  let commitSelection = () => {
    if (props.selectedKey !== void 0 && props.inputValue !== void 0) {
      var ref;
      props.onSelectionChange(selectedKey);
      var ref6;
      let itemText = (ref6 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref6 !== void 0 ? ref6 : "";
      lastValue.current = itemText;
      triggerState.close();
    } else {
      resetInputValue();
      triggerState.close();
    }
  };
  let commit = () => {
    if (triggerState.isOpen && selectionManager.focusedKey != null) {
      if (selectedKey === selectionManager.focusedKey)
        commitSelection();
      else
        setSelectedKey(selectionManager.focusedKey);
    } else if (allowsCustomValue)
      commitCustomValue();
    else
      commitSelection();
  };
  let setFocused = (isFocused) => {
    if (isFocused) {
      if (menuTrigger === "focus")
        open1(null, "focus");
    } else if (shouldCloseOnBlur) {
      var ref;
      var ref7;
      let itemText = (ref7 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref7 !== void 0 ? ref7 : "";
      if (allowsCustomValue && inputValue !== itemText)
        commitCustomValue();
      else
        commitSelection();
    }
    setFocusedState(isFocused);
  };
  return {
    ...triggerState,
    toggle,
    open: open1,
    selectionManager,
    selectedKey,
    setSelectedKey,
    disabledKeys,
    isFocused: isFocused1,
    setFocused,
    selectedItem,
    collection: showAllItems ? originalCollection : filteredCollection,
    inputValue,
    setInputValue,
    commit,
    revert
  };
}
function $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, filter) {
  return new $a02d57049d202695$export$d085fb9e920b5ca7($a9e7382a7d111cb5$var$filterNodes(collection, inputValue, filter));
}
function $a9e7382a7d111cb5$var$filterNodes(nodes, inputValue, filter) {
  let filteredNode = [];
  for (let node of nodes) {
    if (node.type === "section" && node.hasChildNodes) {
      let filtered = $a9e7382a7d111cb5$var$filterNodes(node.childNodes, inputValue, filter);
      if ([
        ...filtered
      ].length > 0)
        filteredNode.push({
          ...node,
          childNodes: filtered
        });
    } else if (node.type !== "section" && filter(node.textValue, inputValue))
      filteredNode.push({
        ...node
      });
  }
  return filteredNode;
}

// node_modules/@react-stately/datepicker/dist/module.js
var import_react6 = __toESM(require_react());
function $35a22f14a1f04b11$export$eac50920cf2fd59a(value, minValue, maxValue) {
  return value != null && (minValue != null && value.compare(minValue) < 0 || maxValue != null && value.compare(maxValue) > 0);
}
var $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {
  year: "numeric",
  month: "numeric",
  day: "numeric",
  hour: "numeric",
  minute: "2-digit",
  second: "2-digit"
};
function $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {
  fieldOptions = {
    ...$35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS,
    ...fieldOptions
  };
  let granularity = options.granularity || "minute";
  let keys = Object.keys(fieldOptions);
  var _maxGranularity;
  let startIdx = keys.indexOf((_maxGranularity = options.maxGranularity) !== null && _maxGranularity !== void 0 ? _maxGranularity : "year");
  if (startIdx < 0)
    startIdx = 0;
  let endIdx = keys.indexOf(granularity);
  if (endIdx < 0)
    endIdx = 2;
  if (startIdx > endIdx)
    throw new Error("maxGranularity must be greater than granularity");
  let opts1 = keys.slice(startIdx, endIdx + 1).reduce((opts, key) => {
    opts[key] = fieldOptions[key];
    return opts;
  }, {});
  if (options.hourCycle != null)
    opts1.hour12 = options.hourCycle === 12;
  opts1.timeZone = options.timeZone || "UTC";
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  if (hasTime && options.timeZone && !options.hideTimeZone)
    opts1.timeZoneName = "short";
  if (options.showEra && startIdx === 0)
    opts1.era = "short";
  return opts1;
}
function $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {
  if (placeholderValue && "hour" in placeholderValue)
    return placeholderValue;
  return new $35ea8db9cb2ccb90$export$680ea196effce5f();
}
function $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {
  if (value === null)
    return null;
  if (!value)
    return void 0;
  return $11d87f3f76e88657$export$b4a036af3fc0b032(value, calendar);
}
function $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {
  if (placeholderValue)
    return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);
  let date = $11d87f3f76e88657$export$b4a036af3fc0b032($14e0f24ef4ac5c92$export$461939dd4422153(timeZone).set({
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  }), calendar);
  if (granularity === "year" || granularity === "month" || granularity === "day")
    return $11d87f3f76e88657$export$93522d1a439f3617(date);
  if (!timeZone)
    return $11d87f3f76e88657$export$b21e0b124e224484(date);
  return date;
}
function $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {
  let lastValue = (0, import_react6.useRef)(v);
  if (v)
    lastValue.current = v;
  v = lastValue.current;
  let defaultTimeZone = v && "timeZone" in v ? v.timeZone : void 0;
  granularity = granularity || (v && "minute" in v ? "minute" : "day");
  if (v && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  return [
    granularity,
    defaultTimeZone
  ];
}
function $ab5bf3f618090389$export$87194bb378cc3ac2(props) {
  var ref;
  let overlayState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [value, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue || null, props.onChange);
  let v = value || props.placeholderValue;
  let [granularity, defaultTimeZone] = $35a22f14a1f04b11$export$2440da353cedad43(v, props.granularity);
  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : "UTC") : null;
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _shouldCloseOnSelect;
  let shouldCloseOnSelect = (_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _shouldCloseOnSelect !== void 0 ? _shouldCloseOnSelect : true;
  let [selectedDate, setSelectedDate] = (0, import_react6.useState)(null);
  let [selectedTime, setSelectedTime] = (0, import_react6.useState)(null);
  if (value) {
    selectedDate = value;
    if ("hour" in value)
      selectedTime = value;
  }
  if (v && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let commitValue = (date, time) => {
    setValue("timeZone" in time ? time.set($11d87f3f76e88657$export$93522d1a439f3617(date)) : $11d87f3f76e88657$export$b21e0b124e224484(date, time));
  };
  let selectDate = (newValue) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (selectedTime || shouldClose)
        commitValue(newValue, selectedTime || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue));
      else
        setSelectedDate(newValue);
    } else
      setValue(newValue);
    if (shouldClose)
      overlayState.setOpen(false);
  };
  let selectTime = (newValue) => {
    if (selectedDate)
      commitValue(selectedDate, newValue);
    else
      setSelectedTime(newValue);
  };
  let validationState = props.validationState || ($35a22f14a1f04b11$export$eac50920cf2fd59a(value, props.minValue, props.maxValue) ? "invalid" : null) || (value && ((ref = props.isDateUnavailable) === null || ref === void 0 ? void 0 : ref.call(props, value)) ? "invalid" : null);
  return {
    value,
    setValue,
    dateValue: selectedDate,
    timeValue: selectedTime,
    setDateValue: selectDate,
    setTimeValue: selectTime,
    granularity,
    hasTime,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !value && selectedDate && hasTime)
        commitValue(selectedDate, selectedTime || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue));
      overlayState.setOpen(isOpen);
    },
    validationState,
    formatValue(locale, fieldOptions) {
      if (!dateValue)
        return "";
      let formatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, {
        granularity,
        timeZone: defaultTimeZone,
        hideTimeZone: props.hideTimeZone,
        hourCycle: props.hourCycle,
        showEra: value.calendar.identifier === "gregory" && value.era === "BC"
      });
      let formatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, formatOptions);
      return formatter.format(dateValue);
    }
  };
}
var $3e3ed55ab2966714$var$placeholders = new $5b160d28a433310d$export$c17fa47878dc55b6({
  ach: {
    year: "mwaka",
    month: "dwe",
    day: "nino"
  },
  af: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  am: {
    year: "\u12D3\u12D3\u12D3\u12D3",
    month: "\u121A\u121C",
    day: "\u1240\u1240"
  },
  an: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ar: {
    year: "\u0633\u0646\u0629",
    month: "\u0634\u0647\u0631",
    day: "\u064A\u0648\u0645"
  },
  ast: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  az: {
    year: "iiii",
    month: "aa",
    day: "gg"
  },
  be: {
    year: "\u0433\u0433\u0433\u0433",
    month: "\u043C\u043C",
    day: "\u0434\u0434"
  },
  bg: {
    year: "\u0433\u0433\u0433\u0433",
    month: "\u043C\u043C",
    day: "\u0434\u0434"
  },
  bn: {
    year: "yyyy",
    month: "\u09AE\u09BF\u09AE\u09BF",
    day: "dd"
  },
  br: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  bs: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  ca: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  cak: {
    year: "jjjj",
    month: "ii",
    day: "q'q'"
  },
  ckb: {
    year: "\u0633\u0627\u06B5",
    month: "\u0645\u0627\u0646\u06AF",
    day: "\u0695\u06C6\u0698"
  },
  cs: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  cy: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  da: {
    year: "\xE5\xE5\xE5\xE5",
    month: "mm",
    day: "dd"
  },
  de: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  dsb: {
    year: "llll",
    month: "mm",
    day: "\u017A\u017A"
  },
  el: {
    year: "\u03B5\u03B5\u03B5\u03B5",
    month: "\u03BC\u03BC",
    day: "\u03B7\u03B7"
  },
  en: {
    year: "yyyy",
    month: "mm",
    day: "dd"
  },
  eo: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  es: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  et: {
    year: "aaaa",
    month: "kk",
    day: "pp"
  },
  eu: {
    year: "uuuu",
    month: "hh",
    day: "ee"
  },
  fa: {
    year: "\u0633\u0627\u0644",
    month: "\u0645\u0627\u0647",
    day: "\u0631\u0648\u0632"
  },
  ff: {
    year: "hhhh",
    month: "ll",
    day: "\xF1\xF1"
  },
  fi: {
    year: "vvvv",
    month: "kk",
    day: "pp"
  },
  fr: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  fy: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  ga: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gd: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gl: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  he: {
    year: "\u05E9\u05E0\u05D4",
    month: "\u05D7\u05D5\u05D3\u05E9",
    day: "\u05D9\u05D5\u05DD"
  },
  hr: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  hsb: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  hu: {
    year: "\xE9\xE9\xE9\xE9",
    month: "hh",
    day: "nn"
  },
  ia: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  id: {
    year: "tttt",
    month: "bb",
    day: "hh"
  },
  it: {
    year: "aaaa",
    month: "mm",
    day: "gg"
  },
  ja: {
    year: " \u5E74 ",
    month: "\u6708",
    day: "\u65E5"
  },
  ka: {
    year: "\u10EC\u10EC\u10EC\u10EC",
    month: "\u10D7\u10D7",
    day: "\u10E0\u10E0"
  },
  kk: {
    year: "\u0436\u0436\u0436\u0436",
    month: "\u0430\u0430",
    day: "\u043A\u043A"
  },
  kn: {
    year: "\u0CB5\u0CB5\u0CB5\u0CB5",
    month: "\u0CAE\u0CBF\u0CAE\u0CC0",
    day: "\u0CA6\u0CBF\u0CA6\u0CBF"
  },
  ko: {
    year: "\uC5F0\uB3C4",
    month: "\uC6D4",
    day: "\uC77C"
  },
  lb: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  lo: {
    year: "\u0E9B\u0E9B\u0E9B\u0E9B",
    month: "\u0E94\u0E94",
    day: "\u0EA7\u0EA7"
  },
  lt: {
    year: "mmmm",
    month: "mm",
    day: "dd"
  },
  lv: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  meh: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ml: {
    year: "\u0D35\u0D7C\u0D37\u0D02",
    month: "\u0D2E\u0D3E\u0D38\u0D02",
    day: "\u0D24\u0D40\u0D2F\u0D24\u0D3F"
  },
  ms: {
    year: "tttt",
    month: "mm",
    day: "hh"
  },
  nl: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  nn: {
    year: "\xE5\xE5\xE5\xE5",
    month: "mm",
    day: "dd"
  },
  no: {
    year: "\xE5\xE5\xE5\xE5",
    month: "mm",
    day: "dd"
  },
  oc: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  pl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  pt: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  rm: {
    year: "oooo",
    month: "mm",
    day: "dd"
  },
  ro: {
    year: "aaaa",
    month: "ll",
    day: "zz"
  },
  ru: {
    year: "\u0433\u0433\u0433\u0433",
    month: "\u043C\u043C",
    day: "\u0434\u0434"
  },
  sc: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  scn: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  sk: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  sl: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  sr: {
    year: "\u0433\u0433\u0433\u0433",
    month: "\u043C\u043C",
    day: "\u0434\u0434"
  },
  sv: {
    year: "\xE5\xE5\xE5\xE5",
    month: "mm",
    day: "dd"
  },
  szl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  tg: {
    year: "\u0441\u0441\u0441\u0441",
    month: "\u043C\u043C",
    day: "\u0440\u0440"
  },
  th: {
    year: "\u0E1B\u0E1B\u0E1B\u0E1B",
    month: "\u0E14\u0E14",
    day: "\u0E27\u0E27"
  },
  tr: {
    year: "yyyy",
    month: "aa",
    day: "gg"
  },
  uk: {
    year: "\u0440\u0440\u0440\u0440",
    month: "\u043C\u043C",
    day: "\u0434\u0434"
  },
  "zh-CN": {
    year: "\u5E74",
    month: "\u6708",
    day: "\u65E5"
  },
  "zh-TW": {
    year: "\u5E74",
    month: "\u6708",
    day: "\u65E5"
  }
}, "en");
function $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {
  if (field === "era" || field === "dayPeriod")
    return value;
  if (field === "year" || field === "month" || field === "day")
    return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);
  return "\u2013\u2013";
}
var $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {
  year: true,
  month: true,
  day: true,
  hour: true,
  minute: true,
  second: true,
  dayPeriod: true,
  era: true
};
var $3c0fc76039f1c516$var$PAGE_STEP = {
  year: 5,
  month: 2,
  day: 7,
  hour: 2,
  minute: 15,
  second: 15
};
var $3c0fc76039f1c516$var$TYPE_MAPPING = {
  dayperiod: "dayPeriod"
};
function $3c0fc76039f1c516$export$60e84778edff6d26(props) {
  let { locale, createCalendar, hideTimeZone, isDisabled, isReadOnly, isRequired } = props;
  let v1 = props.value || props.defaultValue || props.placeholderValue;
  let [granularity, defaultTimeZone] = $35a22f14a1f04b11$export$2440da353cedad43(v1, props.granularity);
  let timeZone = defaultTimeZone || "UTC";
  if (v1 && !(granularity in v1))
    throw new Error("Invalid granularity " + granularity + " for value " + v1.toString());
  let defaultFormatter = (0, import_react6.useMemo)(
    () => new $fb18d541ea1ad717$export$ad991b66133851cf(locale),
    [
      locale
    ]
  );
  let calendar = (0, import_react6.useMemo)(
    () => createCalendar(defaultFormatter.resolvedOptions().calendar),
    [
      createCalendar,
      defaultFormatter
    ]
  );
  let [value1, setDate] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue, props.onChange);
  let calendarValue = (0, import_react6.useMemo)(
    () => $35a22f14a1f04b11$export$61a490a80c552550(value1, calendar),
    [
      value1,
      calendar
    ]
  );
  let [placeholderDate, setPlaceholderDate] = (0, import_react6.useState)(
    () => $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone)
  );
  let val = calendarValue || placeholderDate;
  let showEra = calendar.identifier === "gregory" && val.era === "BC";
  var _maxGranularity;
  let formatOpts = (0, import_react6.useMemo)(
    () => ({
      granularity,
      maxGranularity: (_maxGranularity = props.maxGranularity) !== null && _maxGranularity !== void 0 ? _maxGranularity : "year",
      timeZone: defaultTimeZone,
      hideTimeZone,
      hourCycle: props.hourCycle,
      showEra
    }),
    [
      props.maxGranularity,
      granularity,
      props.hourCycle,
      defaultTimeZone,
      hideTimeZone,
      showEra
    ]
  );
  let opts = (0, import_react6.useMemo)(
    () => $35a22f14a1f04b11$export$7e319ea407e63bc0({}, formatOpts),
    [
      formatOpts
    ]
  );
  let dateFormatter = (0, import_react6.useMemo)(
    () => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, opts),
    [
      locale,
      opts
    ]
  );
  let resolvedOptions = (0, import_react6.useMemo)(
    () => dateFormatter.resolvedOptions(),
    [
      dateFormatter
    ]
  );
  let allSegments = (0, import_react6.useMemo)(
    () => dateFormatter.formatToParts(new Date()).filter(
      (seg) => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]
    ).reduce(
      (p, seg) => (p[seg.type] = true, p),
      {}
    ),
    [
      dateFormatter
    ]
  );
  let [validSegments, setValidSegments] = (0, import_react6.useState)(
    () => props.value || props.defaultValue ? {
      ...allSegments
    } : {}
  );
  let lastCalendarIdentifier = (0, import_react6.useRef)(calendar.identifier);
  (0, import_react6.useEffect)(() => {
    if (calendar.identifier !== lastCalendarIdentifier.current) {
      lastCalendarIdentifier.current = calendar.identifier;
      setPlaceholderDate(
        (placeholder) => Object.keys(validSegments).length > 0 ? $11d87f3f76e88657$export$b4a036af3fc0b032(placeholder, calendar) : $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone)
      );
    }
  }, [
    calendar,
    granularity,
    validSegments,
    defaultTimeZone,
    props.placeholderValue
  ]);
  if (value1 && Object.keys(validSegments).length < Object.keys(allSegments).length) {
    validSegments = {
      ...allSegments
    };
    setValidSegments(validSegments);
  }
  if (value1 == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {
    validSegments = {};
    setValidSegments(validSegments);
    setPlaceholderDate($35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));
  }
  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;
  let setValue = (newValue) => {
    if (props.isDisabled || props.isReadOnly)
      return;
    if (Object.keys(validSegments).length >= Object.keys(allSegments).length) {
      newValue = $11d87f3f76e88657$export$b4a036af3fc0b032(newValue, (v1 === null || v1 === void 0 ? void 0 : v1.calendar) || new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      setDate(newValue);
    } else
      setPlaceholderDate(newValue);
  };
  let dateValue = (0, import_react6.useMemo)(
    () => displayValue.toDate(timeZone),
    [
      displayValue,
      timeZone
    ]
  );
  let segments = (0, import_react6.useMemo)(
    () => dateFormatter.formatToParts(dateValue).map((segment) => {
      let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];
      if (segment.type === "era" && calendar.getEras().length === 1)
        isEditable = false;
      let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];
      let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(segment.type, segment.value, locale) : null;
      return {
        type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,
        text: isPlaceholder ? placeholder : segment.value,
        ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),
        isPlaceholder,
        placeholder,
        isEditable
      };
    }),
    [
      dateValue,
      validSegments,
      dateFormatter,
      resolvedOptions,
      displayValue,
      calendar,
      locale
    ]
  );
  if (allSegments.era && validSegments.year && !validSegments.era) {
    validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  } else if (!allSegments.era && validSegments.era) {
    delete validSegments.era;
    setValidSegments({
      ...validSegments
    });
  }
  let markValid = (part) => {
    validSegments[part] = true;
    if (part === "year" && allSegments.era)
      validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  };
  let adjustSegment = (type, amount) => {
    if (!validSegments[type]) {
      markValid(type);
      if (Object.keys(validSegments).length >= Object.keys(allSegments).length)
        setValue(displayValue);
    } else
      setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));
  };
  let validationState = props.validationState || ($35a22f14a1f04b11$export$eac50920cf2fd59a(calendarValue, props.minValue, props.maxValue) ? "invalid" : null);
  var _maxGranularity1;
  return {
    value: calendarValue,
    dateValue,
    calendar,
    setValue,
    segments,
    dateFormatter,
    validationState,
    granularity,
    maxGranularity: (_maxGranularity1 = props.maxGranularity) !== null && _maxGranularity1 !== void 0 ? _maxGranularity1 : "year",
    isDisabled,
    isReadOnly,
    isRequired,
    increment(part) {
      adjustSegment(part, 1);
    },
    decrement(part) {
      adjustSegment(part, -1);
    },
    incrementPage(part) {
      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);
    },
    decrementPage(part) {
      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));
    },
    setSegment(part, v) {
      markValid(part);
      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));
    },
    confirmPlaceholder() {
      if (props.isDisabled || props.isReadOnly)
        return;
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {
        validSegments = {
          ...allSegments
        };
        setValidSegments(validSegments);
        setValue(displayValue.copy());
      }
    },
    clearSegment(part) {
      delete validSegments[part];
      setValidSegments({
        ...validSegments
      });
      let placeholder = $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone);
      let value = displayValue;
      if (part === "dayPeriod" && "hour" in displayValue && "hour" in placeholder) {
        let isPM = displayValue.hour >= 12;
        let shouldBePM = placeholder.hour >= 12;
        if (isPM && !shouldBePM)
          value = displayValue.set({
            hour: displayValue.hour - 12
          });
        else if (!isPM && shouldBePM)
          value = displayValue.set({
            hour: displayValue.hour + 12
          });
      } else if (part in displayValue)
        value = displayValue.set({
          [part]: placeholder[part]
        });
      setDate(null);
      setValue(value);
    },
    formatValue(fieldOptions) {
      if (!calendarValue)
        return "";
      let formatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, formatOpts);
      let formatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, formatOptions);
      return formatter.format(dateValue);
    }
  };
}
function $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {
  switch (type) {
    case "era": {
      let eras = date.calendar.getEras();
      return {
        value: eras.indexOf(date.era),
        minValue: 0,
        maxValue: eras.length - 1
      };
    }
    case "year":
      return {
        value: date.year,
        minValue: 1,
        maxValue: date.calendar.getYearsInEra(date)
      };
    case "month":
      return {
        value: date.month,
        minValue: $14e0f24ef4ac5c92$export$5412ac11713b72ad(date),
        maxValue: date.calendar.getMonthsInYear(date)
      };
    case "day":
      return {
        value: date.day,
        minValue: $14e0f24ef4ac5c92$export$b2f4953d301981d5(date),
        maxValue: date.calendar.getDaysInMonth(date)
      };
  }
  if ("hour" in date)
    switch (type) {
      case "dayPeriod":
        return {
          value: date.hour >= 12 ? 12 : 0,
          minValue: 0,
          maxValue: 12
        };
      case "hour":
        if (options.hour12) {
          let isPM = date.hour >= 12;
          return {
            value: date.hour,
            minValue: isPM ? 12 : 0,
            maxValue: isPM ? 23 : 11
          };
        }
        return {
          value: date.hour,
          minValue: 0,
          maxValue: 23
        };
      case "minute":
        return {
          value: date.minute,
          minValue: 0,
          maxValue: 59
        };
      case "second":
        return {
          value: date.second,
          minValue: 0,
          maxValue: 59
        };
    }
  return {};
}
function $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {
  switch (part) {
    case "era":
    case "year":
    case "month":
    case "day":
      return value.cycle(part, amount, {
        round: part === "year"
      });
  }
  if ("hour" in value)
    switch (part) {
      case "dayPeriod": {
        let hours = value.hour;
        let isPM = hours >= 12;
        return value.set({
          hour: isPM ? hours - 12 : hours + 12
        });
      }
      case "hour":
      case "minute":
      case "second":
        return value.cycle(part, amount, {
          round: part !== "hour",
          hourCycle: options.hour12 ? 12 : 24
        });
    }
}
function $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {
  switch (part) {
    case "day":
    case "month":
    case "year":
    case "era":
      return value.set({
        [part]: segmentValue
      });
  }
  if ("hour" in value)
    switch (part) {
      case "dayPeriod": {
        let hours = value.hour;
        let wasPM = hours >= 12;
        let isPM = segmentValue >= 12;
        if (isPM === wasPM)
          return value;
        return value.set({
          hour: wasPM ? hours - 12 : hours + 12
        });
      }
      case "hour":
        if (options.hour12) {
          let hours = value.hour;
          let wasPM = hours >= 12;
          if (!wasPM && segmentValue === 12)
            segmentValue = 0;
          if (wasPM && segmentValue < 12)
            segmentValue += 12;
        }
      case "minute":
      case "second":
        return value.set({
          [part]: segmentValue
        });
    }
}
function $93c38a5e28be6249$export$e50a61c1de9f574(props) {
  var ref, ref1;
  let overlayState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [controlledValue, setControlledValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue || null, props.onChange);
  let [placeholderValue, setPlaceholderValue] = (0, import_react6.useState)(
    () => controlledValue || {
      start: null,
      end: null
    }
  );
  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {
    placeholderValue = {
      start: null,
      end: null
    };
    setPlaceholderValue(placeholderValue);
  }
  let value1 = controlledValue || placeholderValue;
  let setValue = (value) => {
    setPlaceholderValue(value);
    if ((value === null || value === void 0 ? void 0 : value.start) && value.end)
      setControlledValue(value);
    else
      setControlledValue(null);
  };
  let v = (value1 === null || value1 === void 0 ? void 0 : value1.start) || (value1 === null || value1 === void 0 ? void 0 : value1.end) || props.placeholderValue;
  let [granularity] = $35a22f14a1f04b11$export$2440da353cedad43(v, props.granularity);
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _shouldCloseOnSelect;
  let shouldCloseOnSelect = (_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _shouldCloseOnSelect !== void 0 ? _shouldCloseOnSelect : true;
  let [dateRange1, setSelectedDateRange] = (0, import_react6.useState)(null);
  let [timeRange1, setSelectedTimeRange] = (0, import_react6.useState)(null);
  if (value1 && value1.start && value1.end) {
    dateRange1 = value1;
    if ("hour" in value1.start)
      timeRange1 = value1;
  }
  let commitValue = (dateRange, timeRange) => {
    setValue({
      start: "timeZone" in timeRange.start ? timeRange.start.set($11d87f3f76e88657$export$93522d1a439f3617(dateRange.start)) : $11d87f3f76e88657$export$b21e0b124e224484(dateRange.start, timeRange.start),
      end: "timeZone" in timeRange.end ? timeRange.end.set($11d87f3f76e88657$export$93522d1a439f3617(dateRange.end)) : $11d87f3f76e88657$export$b21e0b124e224484(dateRange.end, timeRange.end)
    });
  };
  let setDateRange = (range) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (shouldClose || range.start && range.end && (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.start) && (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.end))
        commitValue(range, {
          start: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.start) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue),
          end: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.end) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue)
        });
      else
        setSelectedDateRange(range);
    } else if (range.start && range.end)
      setValue(range);
    else
      setSelectedDateRange(range);
    if (shouldClose)
      overlayState.setOpen(false);
  };
  let setTimeRange = (range) => {
    if ((dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.start) && (dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.end) && range.start && range.end)
      commitValue(dateRange1, range);
    else
      setSelectedTimeRange(range);
  };
  let validationState = props.validationState || (value1 != null && ($35a22f14a1f04b11$export$eac50920cf2fd59a(value1.start, props.minValue, props.maxValue) || $35a22f14a1f04b11$export$eac50920cf2fd59a(value1.end, props.minValue, props.maxValue) || value1.end != null && value1.start != null && value1.end.compare(value1.start) < 0 || (value1 === null || value1 === void 0 ? void 0 : value1.start) && ((ref = props.isDateUnavailable) === null || ref === void 0 ? void 0 : ref.call(props, value1.start)) || (value1 === null || value1 === void 0 ? void 0 : value1.end) && ((ref1 = props.isDateUnavailable) === null || ref1 === void 0 ? void 0 : ref1.call(props, value1.end))) ? "invalid" : null);
  return {
    value: value1,
    setValue,
    dateRange: dateRange1,
    timeRange: timeRange1,
    granularity,
    hasTime,
    setDate(part, date) {
      setDateRange({
        ...dateRange1,
        [part]: date
      });
    },
    setTime(part, time) {
      setTimeRange({
        ...timeRange1,
        [part]: time
      });
    },
    setDateTime(part, dateTime) {
      setValue({
        ...value1,
        [part]: dateTime
      });
    },
    setDateRange,
    setTimeRange,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !((value1 === null || value1 === void 0 ? void 0 : value1.start) && (value1 === null || value1 === void 0 ? void 0 : value1.end)) && (dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.start) && (dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.end) && hasTime)
        commitValue(dateRange1, {
          start: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.start) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue),
          end: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.end) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue)
        });
      overlayState.setOpen(isOpen);
    },
    validationState,
    formatValue(locale, fieldOptions) {
      if (!value1 || !value1.start || !value1.end)
        return null;
      let startTimeZone = "timeZone" in value1.start ? value1.start.timeZone : void 0;
      let startGranularity = props.granularity || (value1.start && "minute" in value1.start ? "minute" : "day");
      let endTimeZone = "timeZone" in value1.end ? value1.end.timeZone : void 0;
      let endGranularity = props.granularity || (value1.end && "minute" in value1.end ? "minute" : "day");
      let startOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, {
        granularity: startGranularity,
        timeZone: startTimeZone,
        hideTimeZone: props.hideTimeZone,
        hourCycle: props.hourCycle,
        showEra: value1.start.calendar.identifier === "gregory" && value1.start.era === "BC" || value1.end.calendar.identifier === "gregory" && value1.end.era === "BC"
      });
      let startDate = value1.start.toDate(startTimeZone || "UTC");
      let endDate = value1.end.toDate(endTimeZone || "UTC");
      let startFormatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, startOptions);
      let endFormatter;
      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value1.start.compare(value1.end) !== 0) {
        try {
          let parts = startFormatter.formatRangeToParts(startDate, endDate);
          let separatorIndex = -1;
          for (let i = 0; i < parts.length; i++) {
            let part = parts[i];
            if (part.source === "shared" && part.type === "literal")
              separatorIndex = i;
            else if (part.source === "endRange")
              break;
          }
          let start = "";
          let end = "";
          for (let i1 = 0; i1 < parts.length; i1++) {
            if (i1 < separatorIndex)
              start += parts[i1].value;
            else if (i1 > separatorIndex)
              end += parts[i1].value;
          }
          return {
            start,
            end
          };
        } catch (e) {
        }
        endFormatter = startFormatter;
      } else {
        let endOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, {
          granularity: endGranularity,
          timeZone: endTimeZone,
          hideTimeZone: props.hideTimeZone,
          hourCycle: props.hourCycle
        });
        endFormatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, endOptions);
      }
      return {
        start: startFormatter.format(startDate),
        end: endFormatter.format(endDate)
      };
    }
  };
}
function $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {
  let { placeholderValue = new $35ea8db9cb2ccb90$export$680ea196effce5f(), minValue, maxValue, granularity } = props;
  let [value, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue, props.onChange);
  let v = value || placeholderValue;
  let day = v && "day" in v ? v : void 0;
  let placeholderDate = (0, import_react6.useMemo)(
    () => $eff5d8ee529ac4bb$var$convertValue(placeholderValue),
    [
      placeholderValue
    ]
  );
  let minDate = (0, import_react6.useMemo)(
    () => $eff5d8ee529ac4bb$var$convertValue(minValue, day),
    [
      minValue,
      day
    ]
  );
  let maxDate = (0, import_react6.useMemo)(
    () => $eff5d8ee529ac4bb$var$convertValue(maxValue, day),
    [
      maxValue,
      day
    ]
  );
  let dateTime = (0, import_react6.useMemo)(
    () => value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value),
    [
      value
    ]
  );
  let onChange = (newValue) => {
    setValue(v && "day" in v ? newValue : newValue && $11d87f3f76e88657$export$d33f79e3ffc3dc83(newValue));
  };
  return $3c0fc76039f1c516$export$60e84778edff6d26({
    ...props,
    value: dateTime,
    defaultValue: void 0,
    minValue: minDate,
    maxValue: maxDate,
    onChange,
    granularity: granularity || "minute",
    maxGranularity: "hour",
    placeholderValue: placeholderDate,
    createCalendar: () => new $3b62074eb05584b2$export$80ee6245ec4f29ec()
  });
}
function $eff5d8ee529ac4bb$var$convertValue(value, date = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3($14e0f24ef4ac5c92$export$aa8b41735afcabd2())) {
  if (!value)
    return null;
  if ("day" in value)
    return value;
  return $11d87f3f76e88657$export$b21e0b124e224484(date, value);
}

// node_modules/@react-stately/data/dist/module.js
var import_react7 = __toESM(require_react());
function $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {
  let {
    initialItems = [],
    initialSelectedKeys,
    getKey = (item) => item.id || item.key,
    filter,
    initialFilterText = ""
  } = options;
  let [state, setState] = (0, import_react7.useState)({
    items: initialItems,
    selectedKeys: initialSelectedKeys === "all" ? "all" : new Set(initialSelectedKeys || []),
    filterText: initialFilterText
  });
  let filteredItems = (0, import_react7.useMemo)(
    () => filter ? state.items.filter(
      (item) => filter(item, state.filterText)
    ) : state.items,
    [
      state.items,
      state.filterText,
      filter
    ]
  );
  return {
    ...state,
    items: filteredItems,
    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({
      getKey
    }, setState),
    getItem(key) {
      return state.items.find(
        (item) => getKey(item) === key
      );
    }
  };
}
function $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {
  let { cursor, getKey } = opts;
  return {
    setSelectedKeys(selectedKeys) {
      dispatch(
        (state) => ({
          ...state,
          selectedKeys
        })
      );
    },
    setFilterText(filterText) {
      dispatch(
        (state) => ({
          ...state,
          filterText
        })
      );
    },
    insert(index, ...values) {
      dispatch(
        (state) => $0d86e9c8f07f9a7b$var$insert(state, index, ...values)
      );
    },
    insertBefore(key, ...values) {
      dispatch((state) => {
        let index = state.items.findIndex(
          (item) => getKey(item) === key
        );
        if (index === -1)
          return;
        return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);
      });
    },
    insertAfter(key, ...values) {
      dispatch((state) => {
        let index = state.items.findIndex(
          (item) => getKey(item) === key
        );
        if (index === -1)
          return;
        return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);
      });
    },
    prepend(...values) {
      dispatch(
        (state) => $0d86e9c8f07f9a7b$var$insert(state, 0, ...values)
      );
    },
    append(...values) {
      dispatch(
        (state) => $0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values)
      );
    },
    remove(...keys) {
      dispatch((state) => {
        let keySet = new Set(keys);
        let items = state.items.filter(
          (item) => !keySet.has(getKey(item))
        );
        let selection = "all";
        if (state.selectedKeys !== "all") {
          selection = new Set(state.selectedKeys);
          for (let key of keys)
            selection.delete(key);
        }
        if (cursor == null && items.length === 0)
          selection = /* @__PURE__ */ new Set();
        return {
          ...state,
          items,
          selectedKeys: selection
        };
      });
    },
    removeSelectedItems() {
      dispatch((state) => {
        if (state.selectedKeys === "all")
          return {
            ...state,
            items: [],
            selectedKeys: /* @__PURE__ */ new Set()
          };
        let selectedKeys = state.selectedKeys;
        let items = state.items.filter(
          (item) => !selectedKeys.has(getKey(item))
        );
        return {
          ...state,
          items,
          selectedKeys: /* @__PURE__ */ new Set()
        };
      });
    },
    move(key, toIndex) {
      dispatch((state) => {
        let index = state.items.findIndex(
          (item) => getKey(item) === key
        );
        if (index === -1)
          return state;
        let copy = state.items.slice();
        let [item1] = copy.splice(index, 1);
        copy.splice(toIndex, 0, item1);
        return {
          ...state,
          items: copy
        };
      });
    },
    moveBefore(key1, keys) {
      dispatch((state) => {
        let toIndex = state.items.findIndex(
          (item) => getKey(item) === key1
        );
        if (toIndex === -1)
          return state;
        let keyArray = Array.isArray(keys) ? keys : [
          ...keys
        ];
        let indices = keyArray.map(
          (key) => state.items.findIndex(
            (item) => getKey(item) === key
          )
        ).sort();
        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);
      });
    },
    moveAfter(key2, keys) {
      dispatch((state) => {
        let toIndex = state.items.findIndex(
          (item) => getKey(item) === key2
        );
        if (toIndex === -1)
          return state;
        let keyArray = Array.isArray(keys) ? keys : [
          ...keys
        ];
        let indices = keyArray.map(
          (key) => state.items.findIndex(
            (item) => getKey(item) === key
          )
        ).sort();
        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);
      });
    },
    update(key, newValue) {
      dispatch((state) => {
        let index = state.items.findIndex(
          (item) => getKey(item) === key
        );
        if (index === -1)
          return state;
        return {
          ...state,
          items: [
            ...state.items.slice(0, index),
            newValue,
            ...state.items.slice(index + 1)
          ]
        };
      });
    }
  };
}
function $0d86e9c8f07f9a7b$var$insert(state, index, ...values) {
  return {
    ...state,
    items: [
      ...state.items.slice(0, index),
      ...values,
      ...state.items.slice(index)
    ]
  };
}
function $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {
  for (let index of indices)
    if (index < toIndex)
      toIndex--;
  let moves = indices.map(
    (from) => ({
      from,
      to: toIndex++
    })
  );
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i].from;
    for (let j = i; j < moves.length; j++) {
      let b = moves[j].from;
      if (b > a)
        moves[j].from--;
    }
  }
  for (let i1 = 0; i1 < moves.length; i1++) {
    let a = moves[i1];
    for (let j = moves.length - 1; j > i1; j--) {
      let b = moves[j];
      if (b.from < a.to)
        a.to++;
      else
        b.from++;
    }
  }
  let copy = state.items.slice();
  for (let move of moves) {
    let [item] = copy.splice(move.from, 1);
    copy.splice(move.to, 0, item);
  }
  return {
    ...state,
    items: copy
  };
}
function $f86e6c1ec7da6ebb$var$reducer(data, action) {
  let selectedKeys;
  switch (data.state) {
    case "idle":
    case "error":
      switch (action.type) {
        case "loading":
        case "loadingMore":
        case "sorting":
        case "filtering":
          var _filterText, _sortDescriptor;
          return {
            ...data,
            filterText: (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText,
            state: action.type,
            items: action.type === "loading" ? [] : data.items,
            sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,
            abortController: action.abortController
          };
        case "update":
          return {
            ...data,
            ...action.updater(data)
          };
        case "success":
        case "error":
          return data;
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    case "loading":
    case "sorting":
    case "filtering":
      switch (action.type) {
        case "success":
          if (action.abortController !== data.abortController)
            return data;
          var _selectedKeys;
          selectedKeys = (_selectedKeys = action.selectedKeys) !== null && _selectedKeys !== void 0 ? _selectedKeys : data.selectedKeys;
          var _filterText1, _sortDescriptor1;
          return {
            ...data,
            filterText: (_filterText1 = action.filterText) !== null && _filterText1 !== void 0 ? _filterText1 : data.filterText,
            state: "idle",
            items: [
              ...action.items
            ],
            selectedKeys: selectedKeys === "all" ? "all" : new Set(selectedKeys),
            sortDescriptor: (_sortDescriptor1 = action.sortDescriptor) !== null && _sortDescriptor1 !== void 0 ? _sortDescriptor1 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };
        case "error":
          if (action.abortController !== data.abortController)
            return data;
          return {
            ...data,
            state: "error",
            error: action.error,
            abortController: null
          };
        case "loading":
        case "loadingMore":
        case "sorting":
        case "filtering":
          data.abortController.abort();
          var _filterText2;
          return {
            ...data,
            filterText: (_filterText2 = action.filterText) !== null && _filterText2 !== void 0 ? _filterText2 : data.filterText,
            state: action.type,
            items: action.type === "loading" ? [] : data.items,
            abortController: action.abortController
          };
        case "update":
          return {
            ...data,
            ...action.updater(data)
          };
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    case "loadingMore":
      switch (action.type) {
        case "success":
          var _selectedKeys1;
          selectedKeys = data.selectedKeys === "all" || action.selectedKeys === "all" ? "all" : /* @__PURE__ */ new Set([
            ...data.selectedKeys,
            ...(_selectedKeys1 = action.selectedKeys) !== null && _selectedKeys1 !== void 0 ? _selectedKeys1 : []
          ]);
          var _sortDescriptor2;
          return {
            ...data,
            state: "idle",
            items: [
              ...data.items,
              ...action.items
            ],
            selectedKeys,
            sortDescriptor: (_sortDescriptor2 = action.sortDescriptor) !== null && _sortDescriptor2 !== void 0 ? _sortDescriptor2 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };
        case "error":
          if (action.abortController !== data.abortController)
            return data;
          return {
            ...data,
            state: "error",
            error: action.error
          };
        case "loading":
        case "sorting":
        case "filtering":
          data.abortController.abort();
          var _filterText3;
          return {
            ...data,
            filterText: (_filterText3 = action.filterText) !== null && _filterText3 !== void 0 ? _filterText3 : data.filterText,
            state: action.type,
            items: action.type === "loading" ? [] : data.items,
            abortController: action.abortController
          };
        case "loadingMore":
          action.abortController.abort();
          return data;
        case "update":
          return {
            ...data,
            ...action.updater(data)
          };
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    default:
      throw new Error(`Invalid state "${data.state}"`);
  }
}
function $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {
  const {
    load,
    sort,
    initialSelectedKeys,
    initialSortDescriptor,
    getKey = (item) => item.id || item.key,
    initialFilterText = ""
  } = options;
  let [data, dispatch] = (0, import_react7.useReducer)($f86e6c1ec7da6ebb$var$reducer, {
    state: "idle",
    error: null,
    items: [],
    selectedKeys: initialSelectedKeys === "all" ? "all" : new Set(initialSelectedKeys),
    sortDescriptor: initialSortDescriptor,
    filterText: initialFilterText
  });
  const dispatchFetch = async (action, fn) => {
    let abortController = new AbortController();
    try {
      dispatch({
        ...action,
        abortController
      });
      var _filterText;
      let previousFilterText = (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText;
      var _sortDescriptor;
      let response = await fn({
        items: data.items.slice(),
        selectedKeys: data.selectedKeys,
        sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,
        signal: abortController.signal,
        cursor: action.type === "loadingMore" ? data.cursor : null,
        filterText: previousFilterText
      });
      var _filterText4;
      let filterText = (_filterText4 = response.filterText) !== null && _filterText4 !== void 0 ? _filterText4 : previousFilterText;
      dispatch({
        type: "success",
        ...response,
        abortController
      });
      if (filterText && filterText !== previousFilterText && !abortController.signal.aborted)
        dispatchFetch({
          type: "filtering",
          filterText
        }, load);
    } catch (e) {
      dispatch({
        type: "error",
        error: e,
        abortController
      });
    }
  };
  (0, import_react7.useEffect)(() => {
    dispatchFetch({
      type: "loading"
    }, load);
  }, []);
  return {
    items: data.items,
    selectedKeys: data.selectedKeys,
    sortDescriptor: data.sortDescriptor,
    isLoading: data.state === "loading" || data.state === "loadingMore" || data.state === "sorting" || data.state === "filtering",
    loadingState: data.state,
    error: data.error,
    filterText: data.filterText,
    getItem(key) {
      return data.items.find(
        (item) => getKey(item) === key
      );
    },
    reload() {
      dispatchFetch({
        type: "loading"
      }, load);
    },
    loadMore() {
      if (data.state === "loadingMore" || data.state === "filtering" || data.cursor == null)
        return;
      dispatchFetch({
        type: "loadingMore"
      }, load);
    },
    sort(sortDescriptor) {
      dispatchFetch({
        type: "sorting",
        sortDescriptor
      }, sort || load);
    },
    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({
      ...options,
      getKey,
      cursor: data.cursor
    }, (fn) => {
      dispatch({
        type: "update",
        updater: fn
      });
    }),
    setFilterText(filterText) {
      dispatchFetch({
        type: "filtering",
        filterText
      }, load);
    }
  };
}
function $be2ea0343af54212$export$d14e1352e21f4a16(options) {
  let {
    initialItems: initialItems1 = [],
    initialSelectedKeys,
    getKey = (item) => item.id || item.key,
    getChildren = (item) => item.children
  } = options;
  let map = (0, import_react7.useMemo)(
    () => /* @__PURE__ */ new Map(),
    []
  );
  let initialNodes = (0, import_react7.useMemo)(
    () => buildTree(initialItems1),
    []
  );
  let [items1, setItems] = (0, import_react7.useState)(initialNodes);
  let [selectedKeys, setSelectedKeys] = (0, import_react7.useState)(new Set(initialSelectedKeys || []));
  function buildTree(initialItems = [], parentKey) {
    return initialItems.map((item) => {
      let node = {
        key: getKey(item),
        parentKey,
        value: item,
        children: null
      };
      node.children = buildTree(getChildren(item), node.key);
      map.set(node.key, node);
      return node;
    });
  }
  function updateTree(items, key, update) {
    let node = map.get(key);
    if (!node)
      return items;
    let newNode = update(node);
    if (newNode == null)
      deleteNode(node);
    else
      addNode(newNode);
    while (node.parentKey) {
      let nextParent = map.get(node.parentKey);
      let copy = {
        key: nextParent.key,
        parentKey: nextParent.parentKey,
        value: nextParent.value,
        children: null
      };
      let children = nextParent.children;
      if (newNode == null)
        children = children.filter(
          (c) => c !== node
        );
      copy.children = children.map((child) => {
        if (child === node)
          return newNode;
        return child;
      });
      map.set(copy.key, copy);
      newNode = copy;
      node = nextParent;
    }
    if (newNode == null)
      items = items.filter(
        (c) => c !== node
      );
    return items.map((item) => {
      if (item === node)
        return newNode;
      return item;
    });
  }
  function addNode(node) {
    map.set(node.key, node);
    for (let child of node.children)
      addNode(child);
  }
  function deleteNode(node) {
    map.delete(node.key);
    for (let child of node.children)
      deleteNode(child);
  }
  return {
    items: items1,
    selectedKeys,
    setSelectedKeys,
    getItem(key) {
      return map.get(key);
    },
    insert(parentKey, index, ...values) {
      setItems((items) => {
        let nodes = buildTree(values, parentKey);
        if (parentKey == null)
          return [
            ...items.slice(0, index),
            ...nodes,
            ...items.slice(index)
          ];
        return updateTree(
          items,
          parentKey,
          (parentNode) => ({
            key: parentNode.key,
            parentKey: parentNode.parentKey,
            value: parentNode.value,
            children: [
              ...parentNode.children.slice(0, index),
              ...nodes,
              ...parentNode.children.slice(index)
            ]
          })
        );
      });
    },
    insertBefore(key, ...values) {
      let node = map.get(key);
      if (!node)
        return;
      let parentNode = map.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items1;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index, ...values);
    },
    insertAfter(key, ...values) {
      let node = map.get(key);
      if (!node)
        return;
      let parentNode = map.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items1;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1, ...values);
    },
    prepend(parentKey, ...values) {
      this.insert(parentKey, 0, ...values);
    },
    append(parentKey, ...values) {
      if (parentKey == null)
        this.insert(null, items1.length, ...values);
      else {
        let parentNode = map.get(parentKey);
        if (!parentNode)
          return;
        this.insert(parentKey, parentNode.children.length, ...values);
      }
    },
    remove(...keys) {
      let newItems = items1;
      for (let key of keys)
        newItems = updateTree(
          newItems,
          key,
          () => null
        );
      setItems(newItems);
      let selection = new Set(selectedKeys);
      for (let key1 of selectedKeys)
        if (!map.has(key1))
          selection.delete(key1);
      setSelectedKeys(selection);
    },
    removeSelectedItems() {
      this.remove(...selectedKeys);
    },
    move(key, toParentKey, index) {
      setItems((items) => {
        let node = map.get(key);
        if (!node)
          return items;
        items = updateTree(
          items,
          key,
          () => null
        );
        const movedNode = {
          ...node,
          parentKey: toParentKey
        };
        return updateTree(
          items,
          toParentKey,
          (parentNode) => ({
            key: parentNode.key,
            parentKey: parentNode.parentKey,
            value: parentNode.value,
            children: [
              ...parentNode.children.slice(0, index),
              movedNode,
              ...parentNode.children.slice(index)
            ]
          })
        );
      });
    },
    update(oldKey, newValue) {
      setItems(
        (items) => updateTree(items, oldKey, (oldNode) => {
          let node = {
            key: oldNode.key,
            parentKey: oldNode.parentKey,
            value: newValue,
            children: null
          };
          node.children = buildTree(getChildren(newValue), node.key);
          return node;
        })
      );
    }
  };
}

// node_modules/@react-stately/numberfield/dist/module.js
var import_react8 = __toESM(require_react());
function $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {
  let { minValue, maxValue, step, formatOptions, value: value1, defaultValue, onChange, locale, isDisabled, isReadOnly } = props;
  let [numberValue, setNumberValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(value1, isNaN(defaultValue) ? NaN : defaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react8.useState)(
    () => isNaN(numberValue) ? "" : new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, formatOptions).format(numberValue)
  );
  let numberParser = (0, import_react8.useMemo)(
    () => new $6c7bd7858deea686$export$cd11ab140839f11d(locale, formatOptions),
    [
      locale,
      formatOptions
    ]
  );
  let numberingSystem = (0, import_react8.useMemo)(
    () => numberParser.getNumberingSystem(inputValue),
    [
      numberParser,
      inputValue
    ]
  );
  let formatter = (0, import_react8.useMemo)(
    () => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, {
      ...formatOptions,
      numberingSystem
    }),
    [
      locale,
      formatOptions,
      numberingSystem
    ]
  );
  let intlOptions = (0, import_react8.useMemo)(
    () => formatter.resolvedOptions(),
    [
      formatter
    ]
  );
  let format = (0, import_react8.useCallback)(
    (value) => isNaN(value) ? "" : formatter.format(value),
    [
      formatter
    ]
  );
  let clampStep = !isNaN(step) ? step : 1;
  if (intlOptions.style === "percent" && isNaN(step))
    clampStep = 0.01;
  let prevValue = (0, import_react8.useRef)(numberValue);
  let prevLocale = (0, import_react8.useRef)(locale);
  let prevFormatOptions = (0, import_react8.useRef)(formatOptions);
  if (!Object.is(numberValue, prevValue.current) || locale !== prevLocale.current || formatOptions !== prevFormatOptions.current) {
    setInputValue(format(numberValue));
    prevValue.current = numberValue;
    prevLocale.current = locale;
    prevFormatOptions.current = formatOptions;
  }
  let parsedValue = (0, import_react8.useMemo)(
    () => numberParser.parse(inputValue),
    [
      numberParser,
      inputValue
    ]
  );
  let parsed = (0, import_react8.useRef)(0);
  parsed.current = parsedValue;
  let commit = () => {
    if (!inputValue.length) {
      setNumberValue(NaN);
      setInputValue(value1 === void 0 ? "" : format(numberValue));
      return;
    }
    if (isNaN(parsed.current)) {
      setInputValue(format(numberValue));
      return;
    }
    let clampedValue;
    if (isNaN(step))
      clampedValue = $9446cca9a3875146$export$7d15b64cf5a3a4c4(parsed.current, minValue, maxValue);
    else
      clampedValue = $9446cca9a3875146$export$cb6e0bb50bc19463(parsed.current, minValue, maxValue, step);
    clampedValue = numberParser.parse(format(clampedValue));
    setNumberValue(clampedValue);
    setInputValue(format(value1 === void 0 ? clampedValue : numberValue));
  };
  let safeNextStep = (operation, minMax) => {
    let prev = parsed.current;
    if (isNaN(prev)) {
      let newValue = isNaN(minMax) ? 0 : minMax;
      return $9446cca9a3875146$export$cb6e0bb50bc19463(newValue, minValue, maxValue, clampStep);
    } else {
      let newValue = $9446cca9a3875146$export$cb6e0bb50bc19463(prev, minValue, maxValue, clampStep);
      if (operation === "+" && newValue > prev || operation === "-" && newValue < prev)
        return newValue;
      return $9446cca9a3875146$export$cb6e0bb50bc19463($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
    }
  };
  let increment = () => {
    let newValue = safeNextStep("+", minValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
  };
  let decrement = () => {
    let newValue = safeNextStep("-", maxValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
  };
  let incrementToMax = () => {
    if (maxValue != null)
      setNumberValue($9446cca9a3875146$export$cb6e0bb50bc19463(maxValue, minValue, maxValue, clampStep));
  };
  let decrementToMin = () => {
    if (minValue != null)
      setNumberValue(minValue);
  };
  let canIncrement = (0, import_react8.useMemo)(
    () => !isDisabled && !isReadOnly && (isNaN(parsedValue) || isNaN(maxValue) || $9446cca9a3875146$export$cb6e0bb50bc19463(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("+", parsedValue, clampStep) <= maxValue),
    [
      isDisabled,
      isReadOnly,
      minValue,
      maxValue,
      clampStep,
      parsedValue
    ]
  );
  let canDecrement = (0, import_react8.useMemo)(
    () => !isDisabled && !isReadOnly && (isNaN(parsedValue) || isNaN(minValue) || $9446cca9a3875146$export$cb6e0bb50bc19463(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("-", parsedValue, clampStep) >= minValue),
    [
      isDisabled,
      isReadOnly,
      minValue,
      maxValue,
      clampStep,
      parsedValue
    ]
  );
  let validate = (value) => numberParser.isValidPartialNumber(value, minValue, maxValue);
  return {
    validate,
    increment,
    incrementToMax,
    decrement,
    decrementToMin,
    canIncrement,
    canDecrement,
    minValue,
    maxValue,
    numberValue: parsedValue,
    setInputValue,
    inputValue,
    commit
  };
}
function $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {
  let result = operator === "+" ? value1 + value2 : value1 - value2;
  if (value1 % 1 !== 0 || value2 % 1 !== 0) {
    const value1Decimal = value1.toString().split(".");
    const value2Decimal = value2.toString().split(".");
    const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
    const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
    const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));
    value1 = Math.round(value1 * multiplier);
    value2 = Math.round(value2 * multiplier);
    result = operator === "+" ? value1 + value2 : value1 - value2;
    result /= multiplier;
  }
  return result;
}

// node_modules/@react-stately/radio/dist/module.js
var import_react9 = __toESM(require_react());
var $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 1e10);
var $a54cdc5c1942b639$var$i = 0;
function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
  let name = (0, import_react9.useMemo)(
    () => props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`,
    [
      props.name
    ]
  );
  let [selectedValue, setSelected] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue, props.onChange);
  let [lastFocusedValue, setLastFocusedValue] = (0, import_react9.useState)(null);
  let setSelectedValue = (value) => {
    if (!props.isReadOnly && !props.isDisabled)
      setSelected(value);
  };
  return {
    name,
    selectedValue,
    setSelectedValue,
    lastFocusedValue,
    setLastFocusedValue,
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    validationState: props.validationState
  };
}

// node_modules/@react-stately/searchfield/dist/module.js
function $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2(props) {
  let [value, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715($0b2218c4e3fe7d7e$var$toString(props.value), $0b2218c4e3fe7d7e$var$toString(props.defaultValue) || "", props.onChange);
  return {
    value,
    setValue
  };
}
function $0b2218c4e3fe7d7e$var$toString(val) {
  if (val == null)
    return;
  return val.toString();
}

// node_modules/@react-stately/select/dist/module.js
var import_react10 = __toESM(require_react());
function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {
  let triggerState = $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props);
  let listState = $a0d645289fe9b86b$export$e7f05e985daf4b5f({
    ...props,
    onSelectionChange: (key) => {
      if (props.onSelectionChange != null)
        props.onSelectionChange(key);
      triggerState.close();
    }
  });
  let [isFocused, setFocused] = (0, import_react10.useState)(false);
  return {
    ...listState,
    ...triggerState,
    open() {
      if (listState.collection.size !== 0)
        triggerState.open();
    },
    toggle(focusStrategy) {
      if (listState.collection.size !== 0)
        triggerState.toggle(focusStrategy);
    },
    isFocused,
    setFocused
  };
}

// node_modules/@react-stately/slider/dist/module.js
var import_react11 = __toESM(require_react());
var $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
var $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
var $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
  const { isDisabled = false, minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation = "horizontal" } = props;
  let pageSize = (0, import_react11.useMemo)(() => {
    let calcPageSize = (maxValue - minValue) / 10;
    calcPageSize = $9446cca9a3875146$export$cb6e0bb50bc19463(calcPageSize, 0, calcPageSize + step, step);
    return Math.max(calcPageSize, step);
  }, [
    step,
    maxValue,
    minValue
  ]);
  let value1 = (0, import_react11.useMemo)(
    () => $28f99e3e86e6ec45$var$convertValue(props.value),
    [
      props.value
    ]
  );
  var ref;
  let defaultValue = (0, import_react11.useMemo)(
    () => (ref = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && ref !== void 0 ? ref : [
      minValue
    ],
    [
      props.defaultValue,
      minValue
    ]
  );
  let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
  let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
  const [values, setValues] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(value1, defaultValue, onChange);
  const [isDraggings, setDraggings] = (0, import_react11.useState)(new Array(values.length).fill(false));
  const isEditablesRef = (0, import_react11.useRef)(new Array(values.length).fill(true));
  const [focusedIndex, setFocusedIndex] = (0, import_react11.useState)(void 0);
  const valuesRef = (0, import_react11.useRef)(null);
  valuesRef.current = values;
  const isDraggingsRef = (0, import_react11.useRef)(null);
  isDraggingsRef.current = isDraggings;
  function getValuePercent(value) {
    return (value - minValue) / (maxValue - minValue);
  }
  function getThumbMinValue(index) {
    return index === 0 ? minValue : values[index - 1];
  }
  function getThumbMaxValue(index) {
    return index === values.length - 1 ? maxValue : values[index + 1];
  }
  function isThumbEditable(index) {
    return isEditablesRef.current[index];
  }
  function setThumbEditable(index, editable) {
    isEditablesRef.current[index] = editable;
  }
  function updateValue(index, value) {
    if (isDisabled || !isThumbEditable(index))
      return;
    const thisMin = getThumbMinValue(index);
    const thisMax = getThumbMaxValue(index);
    value = $9446cca9a3875146$export$cb6e0bb50bc19463(value, thisMin, thisMax, step);
    valuesRef.current = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value);
    setValues(valuesRef.current);
  }
  function updateDragging(index, dragging) {
    if (isDisabled || !isThumbEditable(index))
      return;
    const wasDragging = isDraggingsRef.current[index];
    isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);
    setDraggings(isDraggingsRef.current);
    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean))
      onChangeEnd(valuesRef.current);
  }
  function getFormattedValue(value) {
    return formatter.format(value);
  }
  function setThumbPercent(index, percent) {
    updateValue(index, getPercentValue(percent));
  }
  function getRoundedValue(value) {
    return Math.round((value - minValue) / step) * step + minValue;
  }
  function getPercentValue(percent) {
    const val = percent * (maxValue - minValue) + minValue;
    return $9446cca9a3875146$export$7d15b64cf5a3a4c4(getRoundedValue(val), minValue, maxValue);
  }
  function incrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, $9446cca9a3875146$export$cb6e0bb50bc19463(values[index] + s, minValue, maxValue, step));
  }
  function decrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, $9446cca9a3875146$export$cb6e0bb50bc19463(values[index] - s, minValue, maxValue, step));
  }
  return {
    values,
    getThumbValue: (index) => values[index],
    setThumbValue: updateValue,
    setThumbPercent,
    isThumbDragging: (index) => isDraggings[index],
    setThumbDragging: updateDragging,
    focusedThumb: focusedIndex,
    setFocusedThumb: setFocusedIndex,
    getThumbPercent: (index) => getValuePercent(values[index]),
    getValuePercent,
    getThumbValueLabel: (index) => getFormattedValue(values[index]),
    getFormattedValue,
    getThumbMinValue,
    getThumbMaxValue,
    getPercentValue,
    isThumbEditable,
    setThumbEditable,
    incrementThumb,
    decrementThumb,
    step,
    pageSize,
    orientation,
    isDisabled
  };
}
function $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {
  if (array[index] === value)
    return array;
  return [
    ...array.slice(0, index),
    value,
    ...array.slice(index + 1)
  ];
}
function $28f99e3e86e6ec45$var$convertValue(value) {
  if (value == null)
    return void 0;
  return Array.isArray(value) ? value : [
    value
  ];
}
function $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {
  return (newValue) => {
    if (typeof value === "number" || typeof defaultValue === "number")
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
    else
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  };
}

// node_modules/@react-stately/table/dist/module.js
var import_react13 = __toESM(require_react());

// node_modules/@react-stately/grid/dist/module.js
var import_react12 = __toESM(require_react());
function $62967d126f3aa823$export$4007ac09ff9c68ed(props) {
  let { collection, focusMode } = props;
  let selectionState = $7af3f5b51489e0b5$export$253fe78d46329472(props);
  let disabledKeys = (0, import_react12.useMemo)(
    () => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(),
    [
      props.disabledKeys
    ]
  );
  let setFocusedKey = selectionState.setFocusedKey;
  selectionState.setFocusedKey = (key, child) => {
    if (focusMode === "cell" && key != null) {
      let item = collection.getItem(key);
      if ((item === null || item === void 0 ? void 0 : item.type) === "item") {
        var ref, ref1;
        let children = [
          ...item.childNodes
        ];
        if (child === "last")
          key = (ref = children[children.length - 1]) === null || ref === void 0 ? void 0 : ref.key;
        else
          key = (ref1 = children[0]) === null || ref1 === void 0 ? void 0 : ref1.key;
      }
    }
    setFocusedKey(key, child);
  };
  (0, import_react12.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey))
      selectionState.setFocusedKey(null);
  }, [
    collection,
    selectionState
  ]);
  return {
    collection,
    disabledKeys,
    isKeyboardNavigationDisabled: false,
    selectionManager: new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, selectionState)
  };
}
var tmp2 = Symbol.iterator;
var $16805b1b18093c5f$export$de3fdf6493c353d = class {
  *[tmp2]() {
    yield* [
      ...this.rows
    ];
  }
  get size() {
    return [
      ...this.rows
    ].length;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    var ref;
    return (ref = [
      ...this.rows
    ][0]) === null || ref === void 0 ? void 0 : ref.key;
  }
  getLastKey() {
    var ref;
    let rows = [
      ...this.rows
    ];
    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  constructor(opts) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyMap = /* @__PURE__ */ new Map();
    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
    this.rows = [];
    let visit = (node) => {
      let prevNode = this.keyMap.get(node.key);
      if (opts.visitNode)
        node = opts.visitNode(node);
      this.keyMap.set(node.key, node);
      let childKeys = /* @__PURE__ */ new Set();
      let last;
      for (let child of node.childNodes) {
        if (child.type === "cell" && child.parentKey == null)
          child.parentKey = node.key;
        childKeys.add(child.key);
        if (last) {
          last.nextKey = child.key;
          child.prevKey = last.key;
        } else
          child.prevKey = null;
        visit(child);
        last = child;
      }
      if (last)
        last.nextKey = null;
      if (prevNode) {
        for (let child of prevNode.childNodes)
          if (!childKeys.has(child.key))
            remove(child);
      }
    };
    let remove = (node) => {
      this.keyMap.delete(node.key);
      for (let child of node.childNodes)
        if (this.keyMap.get(child.key) === child)
          remove(child);
    };
    let last1;
    opts.items.forEach((node, i) => {
      let rowNode = {
        level: 0,
        key: "row-" + i,
        type: "row",
        value: void 0,
        hasChildNodes: true,
        childNodes: [
          ...node.childNodes
        ],
        rendered: void 0,
        textValue: void 0,
        ...node,
        index: i
      };
      if (last1) {
        last1.nextKey = rowNode.key;
        rowNode.prevKey = last1.key;
      } else
        rowNode.prevKey = null;
      this.rows.push(rowNode);
      visit(rowNode);
      last1 = rowNode;
    });
    if (last1)
      last1.nextKey = null;
  }
};

// node_modules/@react-stately/table/dist/module.js
var $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = "row-header-column-" + Math.random().toString(36).slice(2);
function $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {
  let columns = [];
  let seen = /* @__PURE__ */ new Map();
  for (let column of columnNodes) {
    let parentKey = column.parentKey;
    let col = [
      column
    ];
    while (parentKey) {
      let parent = keyMap.get(parentKey);
      if (seen.has(parent)) {
        parent.colspan++;
        let { column: column2, index } = seen.get(parent);
        if (index > col.length)
          break;
        for (let i2 = index; i2 < col.length; i2++)
          column2.splice(i2, 0, null);
        for (let i1 = col.length; i1 < column2.length; i1++)
          if (column2[i1] && seen.has(column2[i1]))
            seen.get(column2[i1]).index = i1;
      } else {
        parent.colspan = 1;
        col.push(parent);
        seen.set(parent, {
          column: col,
          index: col.length - 1
        });
      }
      parentKey = parent.parentKey;
    }
    columns.push(col);
    column.index = columns.length - 1;
  }
  let maxLength = Math.max(...columns.map(
    (c) => c.length
  ));
  let headerRows = Array(maxLength).fill(0).map(
    () => []
  );
  let colIndex = 0;
  for (let column1 of columns) {
    let i2 = maxLength - 1;
    for (let item of column1) {
      if (item) {
        let row = headerRows[i2];
        let rowLength = row.reduce(
          (p, c) => p + c.colspan,
          0
        );
        if (rowLength < colIndex) {
          let placeholder = {
            type: "placeholder",
            key: "placeholder-" + item.key,
            colspan: colIndex - rowLength,
            index: rowLength,
            value: null,
            rendered: null,
            level: i2,
            hasChildNodes: false,
            childNodes: [],
            textValue: null
          };
          if (row.length > 0) {
            row[row.length - 1].nextKey = placeholder.key;
            placeholder.prevKey = row[row.length - 1].key;
          }
          row.push(placeholder);
        }
        if (row.length > 0) {
          row[row.length - 1].nextKey = item.key;
          item.prevKey = row[row.length - 1].key;
        }
        item.level = i2;
        item.colIndex = colIndex;
        row.push(item);
      }
      i2--;
    }
    colIndex++;
  }
  let i = 0;
  for (let row1 of headerRows) {
    let rowLength = row1.reduce(
      (p, c) => p + c.colspan,
      0
    );
    if (rowLength < columnNodes.length) {
      let placeholder = {
        type: "placeholder",
        key: "placeholder-" + row1[row1.length - 1].key,
        colspan: columnNodes.length - rowLength,
        index: rowLength,
        value: null,
        rendered: null,
        level: i,
        hasChildNodes: false,
        childNodes: [],
        textValue: null,
        prevKey: row1[row1.length - 1].key
      };
      row1.push(placeholder);
    }
    i++;
  }
  return headerRows.map((childNodes, index) => {
    let row = {
      type: "headerrow",
      key: "headerrow-" + index,
      index,
      value: null,
      rendered: null,
      level: 0,
      hasChildNodes: true,
      childNodes,
      textValue: null
    };
    return row;
  });
}
var tmp3 = Symbol.iterator;
var $788781baa30117fa$export$596e1b2e2cf93690 = class extends $16805b1b18093c5f$export$de3fdf6493c353d {
  *[tmp3]() {
    yield* this.body.childNodes;
  }
  get size() {
    return [
      ...this.body.childNodes
    ].length;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    var ref;
    return (ref = [
      ...this.body.childNodes
    ][0]) === null || ref === void 0 ? void 0 : ref.key;
  }
  getLastKey() {
    var ref;
    let rows = [
      ...this.body.childNodes
    ];
    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  constructor(nodes, prev, opts) {
    let rowHeaderColumnKeys = /* @__PURE__ */ new Set();
    let body;
    let columns = [];
    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
      let rowHeaderColumn = {
        type: "column",
        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,
        value: null,
        textValue: "",
        level: 0,
        index: 0,
        hasChildNodes: false,
        rendered: null,
        childNodes: [],
        props: {
          isSelectionCell: true
        }
      };
      columns.unshift(rowHeaderColumn);
    }
    let rows = [];
    let columnKeyMap = /* @__PURE__ */ new Map();
    let visit = (node) => {
      switch (node.type) {
        case "body":
          body = node;
          break;
        case "column":
          columnKeyMap.set(node.key, node);
          if (!node.hasChildNodes) {
            columns.push(node);
            if (node.props.isRowHeader)
              rowHeaderColumnKeys.add(node.key);
          }
          break;
        case "item":
          rows.push(node);
          return;
      }
      for (let child of node.childNodes)
        visit(child);
    };
    for (let node1 of nodes)
      visit(node1);
    let headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);
    headerRows.forEach(
      (row, i) => rows.splice(i, 0, row)
    );
    super({
      columnCount: columns.length,
      items: rows,
      visitNode: (node) => {
        node.column = columns[node.index];
        return node;
      }
    });
    this.columns = columns;
    this.rowHeaderColumnKeys = rowHeaderColumnKeys;
    this.body = body;
    this.headerRows = headerRows;
    if (this.rowHeaderColumnKeys.size === 0)
      this.rowHeaderColumnKeys.add(this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);
  }
};
var $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {
  ascending: "descending",
  descending: "ascending"
};
function $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {
  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = (0, import_react13.useState)(false);
  let { selectionMode = "none" } = props;
  let context = (0, import_react13.useMemo)(
    () => ({
      showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== "none",
      selectionMode,
      columns: []
    }),
    [
      props.children,
      props.showSelectionCheckboxes,
      selectionMode
    ]
  );
  let collection = $7613b1592d41b092$export$6cd28814d92fa9c9(
    props,
    (nodes, prev) => new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context),
    context
  );
  let { disabledKeys, selectionManager } = $62967d126f3aa823$export$4007ac09ff9c68ed({
    ...props,
    collection
  });
  return {
    collection,
    disabledKeys,
    selectionManager,
    showSelectionCheckboxes: props.showSelectionCheckboxes || false,
    sortDescriptor: props.sortDescriptor,
    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,
    setKeyboardNavigationDisabled,
    sort(columnKey, direction) {
      var ref;
      props.onSortChange({
        column: columnKey,
        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : "ascending"
      });
    }
  };
}
function $312ae3b56a94a86e$var$TableHeader(props) {
  return null;
}
$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {
  let { children, columns } = props;
  if (typeof children === "function") {
    if (!columns)
      throw new Error("props.children was a function but props.columns is missing");
    for (let column of columns)
      yield {
        type: "column",
        value: column,
        renderer: children
      };
  } else {
    let columns2 = [];
    import_react13.default.Children.forEach(children, (column) => {
      columns2.push({
        type: "column",
        element: column
      });
    });
    yield* columns2;
  }
};
var $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;
function $4ae5314bf50db1a3$var$TableBody(props) {
  return null;
}
$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode2(props) {
  let { children, items: items1 } = props;
  yield {
    type: "body",
    hasChildNodes: true,
    props,
    *childNodes() {
      if (typeof children === "function") {
        if (!items1)
          throw new Error("props.children was a function but props.items is missing");
        for (let item of items1)
          yield {
            type: "item",
            value: item,
            renderer: children
          };
      } else {
        let items = [];
        import_react13.default.Children.forEach(children, (item) => {
          items.push({
            type: "item",
            element: item
          });
        });
        yield* items;
      }
    }
  };
};
var $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;
function $1cd244557c2f97d5$var$Column(props) {
  return null;
}
$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode3(props, context1) {
  let { title, children, childColumns: childColumns1 } = props;
  let rendered = title || children;
  let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"];
  let fullNodes = yield {
    type: "column",
    hasChildNodes: !!childColumns1 || title && import_react13.default.Children.count(children) > 0,
    rendered,
    textValue,
    props,
    *childNodes() {
      if (childColumns1)
        for (let child1 of childColumns1)
          yield {
            type: "column",
            value: child1
          };
      else if (title) {
        let childColumns = [];
        import_react13.default.Children.forEach(children, (child) => {
          childColumns.push({
            type: "column",
            element: child
          });
        });
        yield* childColumns;
      }
    },
    shouldInvalidate(newContext) {
      updateContext(newContext);
      return false;
    }
  };
  let updateContext = (context) => {
    for (let node of fullNodes)
      if (!node.hasChildNodes)
        context.columns.push(node);
  };
  updateContext(context1);
};
var $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;
function $70d70eb16ea48428$var$Row(props) {
  return null;
}
$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode4(props, context) {
  let { children, textValue } = props;
  yield {
    type: "item",
    props,
    textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: true,
    *childNodes() {
      if (context.showSelectionCheckboxes && context.selectionMode !== "none")
        yield {
          type: "cell",
          key: "header",
          props: {
            isSelectionCell: true
          }
        };
      if (typeof children === "function")
        for (let column of context.columns)
          yield {
            type: "cell",
            element: children(column.key),
            key: column.key
          };
      else {
        let cells = [];
        import_react13.default.Children.forEach(children, (cell) => {
          cells.push({
            type: "cell",
            element: cell
          });
        });
        if (cells.length !== context.columns.length)
          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);
        yield* cells;
      }
    },
    shouldInvalidate(newContext) {
      return newContext.columns.length !== context.columns.length || newContext.columns.some(
        (c, i) => c.key !== context.columns[i].key
      ) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;
    }
  };
};
var $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;
function $941d1d9a6a28982a$var$Cell(props) {
  return null;
}
$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode5(props) {
  let { children } = props;
  let textValue = props.textValue || (typeof children === "string" ? children : "") || props["aria-label"] || "";
  yield {
    type: "cell",
    props,
    rendered: children,
    textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: false
  };
};
var $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;

// node_modules/@react-stately/tabs/dist/module.js
var import_react14 = __toESM(require_react());
function $76f919a04c5a7d14$export$4ba071daf4e486(props) {
  let state = $a0d645289fe9b86b$export$e7f05e985daf4b5f({
    ...props,
    suppressTextValueWarning: true
  });
  let { selectionManager, collection, selectedKey: currentSelectedKey } = state;
  let lastSelectedKey = (0, import_react14.useRef)(currentSelectedKey);
  let selectedKey = currentSelectedKey;
  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
    selectedKey = collection.getFirstKey();
    while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey())
      selectedKey = collection.getKeyAfter(selectedKey);
    if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey())
      selectedKey = collection.getFirstKey();
    selectionManager.setSelectedKeys([
      selectedKey
    ]);
  }
  if (selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current)
    selectionManager.setFocusedKey(selectedKey);
  lastSelectedKey.current = selectedKey;
  return {
    ...state,
    isDisabled: props.isDisabled || false
  };
}

// node_modules/@react-stately/tooltip/dist/module.js
var import_react15 = __toESM(require_react());
var $8796f90736e175cb$var$TOOLTIP_DELAY = 1500;
var $8796f90736e175cb$var$TOOLTIP_COOLDOWN = 500;
var $8796f90736e175cb$var$tooltips = {};
var $8796f90736e175cb$var$tooltipId = 0;
var $8796f90736e175cb$var$globalWarmedUp = false;
var $8796f90736e175cb$var$globalWarmUpTimeout = null;
var $8796f90736e175cb$var$globalCooldownTimeout = null;
function $8796f90736e175cb$export$4d40659c25ecb50b(props = {}) {
  let { delay = $8796f90736e175cb$var$TOOLTIP_DELAY } = props;
  let { isOpen, open, close } = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let id = (0, import_react15.useMemo)(
    () => `${++$8796f90736e175cb$var$tooltipId}`,
    []
  );
  let closeTimeout = (0, import_react15.useRef)();
  let ensureTooltipEntry = () => {
    $8796f90736e175cb$var$tooltips[id] = hideTooltip;
  };
  let closeOpenTooltips = () => {
    for (let hideTooltipId in $8796f90736e175cb$var$tooltips)
      if (hideTooltipId !== id) {
        $8796f90736e175cb$var$tooltips[hideTooltipId](true);
        delete $8796f90736e175cb$var$tooltips[hideTooltipId];
      }
  };
  let showTooltip = () => {
    clearTimeout(closeTimeout.current);
    closeTimeout.current = null;
    closeOpenTooltips();
    ensureTooltipEntry();
    $8796f90736e175cb$var$globalWarmedUp = true;
    open();
    if ($8796f90736e175cb$var$globalWarmUpTimeout) {
      clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);
      $8796f90736e175cb$var$globalWarmUpTimeout = null;
    }
    if ($8796f90736e175cb$var$globalCooldownTimeout) {
      clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);
      $8796f90736e175cb$var$globalCooldownTimeout = null;
    }
  };
  let hideTooltip = (immediate) => {
    if (immediate) {
      clearTimeout(closeTimeout.current);
      closeTimeout.current = null;
      close();
    } else if (!closeTimeout.current)
      closeTimeout.current = setTimeout(() => {
        closeTimeout.current = null;
        close();
      }, $8796f90736e175cb$var$TOOLTIP_COOLDOWN);
    if ($8796f90736e175cb$var$globalWarmUpTimeout) {
      clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);
      $8796f90736e175cb$var$globalWarmUpTimeout = null;
    }
    if ($8796f90736e175cb$var$globalWarmedUp) {
      if ($8796f90736e175cb$var$globalCooldownTimeout)
        clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);
      $8796f90736e175cb$var$globalCooldownTimeout = setTimeout(() => {
        delete $8796f90736e175cb$var$tooltips[id];
        $8796f90736e175cb$var$globalCooldownTimeout = null;
        $8796f90736e175cb$var$globalWarmedUp = false;
      }, $8796f90736e175cb$var$TOOLTIP_COOLDOWN);
    }
  };
  let warmupTooltip = () => {
    closeOpenTooltips();
    ensureTooltipEntry();
    if (!isOpen && !$8796f90736e175cb$var$globalWarmUpTimeout && !$8796f90736e175cb$var$globalWarmedUp)
      $8796f90736e175cb$var$globalWarmUpTimeout = setTimeout(() => {
        $8796f90736e175cb$var$globalWarmUpTimeout = null;
        $8796f90736e175cb$var$globalWarmedUp = true;
        showTooltip();
      }, delay);
    else if (!isOpen)
      showTooltip();
  };
  (0, import_react15.useEffect)(() => {
    return () => {
      clearTimeout(closeTimeout.current);
      let tooltip = $8796f90736e175cb$var$tooltips[id];
      if (tooltip)
        delete $8796f90736e175cb$var$tooltips[id];
    };
  }, [
    id
  ]);
  return {
    isOpen,
    open: (immediate) => {
      if (!immediate && delay > 0 && !closeTimeout.current)
        warmupTooltip();
      else
        showTooltip();
    },
    close: hideTooltip
  };
}

// node_modules/@react-stately/tree/dist/module.js
var import_react16 = __toESM(require_react());
var tmp4 = Symbol.iterator;
var $05ca4cd7c4a5a999$export$863faf230ee2118a = class {
  *[tmp4]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  constructor(nodes, { expandedKeys } = {}) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.iterable = nodes;
    expandedKeys = expandedKeys || /* @__PURE__ */ new Set();
    let visit = (node) => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && (node.type === "section" || expandedKeys.has(node.key)))
        for (let child of node.childNodes)
          visit(child);
    };
    for (let node2 of nodes)
      visit(node2);
    let last;
    let index = 0;
    for (let [key, node1] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node1.prevKey = last.key;
      } else {
        this.firstKey = key;
        node1.prevKey = void 0;
      }
      if (node1.type === "item")
        node1.index = index++;
      last = node1;
      last.nextKey = void 0;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
};
function $875d6693e12af071$export$728d6ba534403756(props) {
  let [expandedKeys, setExpandedKeys] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.expandedKeys ? new Set(props.expandedKeys) : void 0, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : /* @__PURE__ */ new Set(), props.onExpandedChange);
  let selectionState = $7af3f5b51489e0b5$export$253fe78d46329472(props);
  let disabledKeys = (0, import_react16.useMemo)(
    () => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(),
    [
      props.disabledKeys
    ]
  );
  let tree = $7613b1592d41b092$export$6cd28814d92fa9c9(
    props,
    (nodes) => new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {
      expandedKeys
    }),
    null,
    [
      expandedKeys
    ]
  );
  (0, import_react16.useEffect)(() => {
    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey))
      selectionState.setFocusedKey(null);
  }, [
    tree,
    selectionState.focusedKey
  ]);
  let onToggle = (key) => {
    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));
  };
  return {
    collection: tree,
    expandedKeys,
    disabledKeys,
    toggleKey: onToggle,
    selectionManager: new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(tree, selectionState)
  };
}
function $875d6693e12af071$var$toggleKey(set, key) {
  let res = new Set(set);
  if (res.has(key))
    res.delete(key);
  else
    res.add(key);
  return res;
}
export {
  $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell,
  $1cd244557c2f97d5$export$816b5d811295e6bc as Column,
  $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 as Item,
  $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row,
  $9fc4852771d079eb$export$6e2c8f0811a474ce as Section,
  $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody,
  $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader,
  $f86e6c1ec7da6ebb$export$bc3384a35de93d66 as useAsyncList,
  $131cf43a05231e1e$export$6d095e787d2b5e1f as useCalendarState,
  $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState,
  $7613b1592d41b092$export$6cd28814d92fa9c9 as useCollection,
  $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e as useComboBoxState,
  $3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState,
  $ab5bf3f618090389$export$87194bb378cc3ac2 as useDatePickerState,
  $93c38a5e28be6249$export$e50a61c1de9f574 as useDateRangePickerState,
  $0d86e9c8f07f9a7b$export$762f73dccccd255d as useListData,
  $e72dd72e1c76a225$export$2f645645f7bca764 as useListState,
  $a28c903ee9ad8dc5$export$79fefeb1c2091ac3 as useMenuTriggerState,
  $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState,
  $de67e98908f0c6ee$export$7f629e9dc1ecf37c as useNumberFieldState,
  $fc909762b330b746$export$61c6a8c84e605fb6 as useOverlayTriggerState,
  $a54cdc5c1942b639$export$bca9d026f8e704eb as useRadioGroupState,
  $9a36b6ba2fb1a7c5$export$9a987164d97ecc90 as useRangeCalendarState,
  $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2 as useSearchFieldState,
  $2bc3a590c5373a4e$export$5159ec8b34d4ec12 as useSelectState,
  $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState,
  $28f99e3e86e6ec45$export$e5fda3247f5d67f9 as useSliderState,
  $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState,
  $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState,
  $eff5d8ee529ac4bb$export$fd53cef0cc796101 as useTimeFieldState,
  $3017fa7ffdddec74$export$8042c6c013fd5226 as useToggleState,
  $8796f90736e175cb$export$4d40659c25ecb50b as useTooltipTriggerState,
  $be2ea0343af54212$export$d14e1352e21f4a16 as useTreeData,
  $875d6693e12af071$export$728d6ba534403756 as useTreeState
};
//# sourceMappingURL=react-stately.js.map
